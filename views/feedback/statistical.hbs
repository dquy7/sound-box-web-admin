<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Feedback Page</title>
    <!-- Add your CSS links here -->
    <style>
        /* Style for the table */
        body {
    font-family: 'Arial', sans-serif;
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

.container {
    max-width: 1200px;
    margin: 20px auto;
}

.box-chart {
    display: flex;
    justify-content: space-around;
    align-items: flex-start;
}

.box-tkdk {
    text-align: center;
    margin: 20px;
}

.chart-title {
    font-size: 16px;
    margin-top: 10px;
}

canvas {
border: 1px solid #ddd;
}
#feedbackChart {
width: 100%;
height: 100%;
}
#chartContainer {
width: 500px;
height: 300px;
margin-left: 40%;
}

    </style>
</head>
<body>
     <nav style="background-color: aquamarine; height: 82px;" class="navbar navbar-expand-lg bg-body-tertiary">
  <div class="container-fluid">
    <a style="font-size: 30px; font-weight: bold;" class="navbar-brand" href="./feedbackstatistical">Thống Kê Feedback</a>
    <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
      <span class="navbar-toggler-icon"></span>
    </button>
    <div class="collapse navbar-collapse" id="navbarSupportedContent">
      <ul class="navbar-nav me-auto mb-2 mb-lg-0">
        <li class="nav-item">
          <a class="nav-link active" aria-current="page" href="./revenue">Thống Kê Người Dùng</a>
        </li>
          <li class="nav-item">
          <a class="nav-link active" aria-current="page" href="./statisticalmusic">Thống Kê Bài Hát</a>
        </li>
         <li class="nav-item">
          <a class="nav-link active" aria-current="page" href="./statisticalcomment">Thống Kê Bình Luận</a>
        </li>
      </ul>
      <form class="d-flex" role="search">
        <input class="form-control me-2" type="search" placeholder="Search" aria-label="Search">
        <button class="btn btn-outline-success" type="submit">Search</button>
      </form>
    </div>
  </div>
</nav>

<div style="margin-left: 20px; margin-top: 40px;">
    Feedback chưa trả lời: <span style="color: #007bff;" id="unansweredCount">0</span>
</div>
<div style="margin-left: 20px;">
   Feedback đã trả lời:  <span style="color: #36a2eb;" id="answeredCount">0</span>
</div>


  <div id="chartContainer">
        <canvas id="feedbackChart"></canvas>
        <p style="margin-left: 90px; margin-top: 10px;">1. Thống Kê Bài Hát</p>
        </div>



 <div class="container">
        <div class="box-chart">
            <div class="box-tkdk">
               <canvas id="dailyFeedbackChart" width="300" height="300"></canvas>
                 <p class="chart-title">2. Lượt Nghe Hàng Ngày</p>
            </div>
            <div class="box-tkdk">
                <canvas id="monthlyFeedbackChart" width="300" height="300"></canvas>
                <p class="chart-title">2.1. Lượt Nghe Hàng Tháng</p>
            </div>
            <div class="box-tkdk">
                <canvas id="yearlyFeedbackChart" width="300" height="300"></canvas>
                <p class="chart-title">2.2.Lượt Nghe Hàng Năm</p>
            </div>
        </div>
    </div>



 <!-- Add your JavaScript links here -->
 <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.6/dist/umd/popper.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.min.js"></script>
<!-- Firebase JavaScript SDK -->
  <script src="https://www.gstatic.com/firebasejs/8.8.0/firebase-app.js"></script>
  <script src="https://www.gstatic.com/firebasejs/8.8.0/firebase-database.js"></script>
   <script src="https://cdn.jsdelivr.net/npm/@emailjs/browser@3/dist/email.min.js"></script>
   <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<script>
    const firebaseConfig = {
        apiKey: "AIzaSyCZgZP878mOAM2ec-hz1WFwORxSw_J6d2k",
        authDomain: "soundbox-du-an-md31.firebaseapp.com",
        databaseURL: "https://soundbox-du-an-md31-default-rtdb.firebaseio.com",
        projectId: "soundbox-du-an-md31",
        storageBucket: "soundbox-du-an-md31.appspot.com",
        messagingSenderId: "265264289877",
        appId: "1:265264289877:web:0f88e2fa54c638685e9cdc",
        measurementId: "G-FE9Z9NKJDR"
    };

     firebase.initializeApp(firebaseConfig);
    const database = firebase.database();
    const feedbackRef = database.ref("feedback");
// Hàm lấy tất cả dữ liệu phản hồi
async function getAllFeedback() {
    try {
        const snapshot = await feedbackRef.once("value");
        const feedbackData = snapshot.val() || {};

        // Chuyển đổi dữ liệu từ object thành mảng
        const feedbackArray = Object.keys(feedbackData).map(key => ({
            key: key,
            ...feedbackData[key]
        }));

        return feedbackArray;
    } catch (error) {
        throw new Error("Lỗi khi lấy dữ liệu từ Firebase: " + error.message);
    }
}


// Hàm để cập nhật biểu đồ thống kê
function updateStatistics(feedbackData) {
    const repliedCount = feedbackData.filter(feedback => feedback.reply).length;
    const unansweredCount = feedbackData.length - repliedCount;

    // Sử dụng Chart.js để tạo biểu đồ
    const ctx = document.getElementById('feedbackChart').getContext('2d');
    const chart = new Chart(ctx, {
        type: 'pie',
        data: {
            labels: ['Đã trả lời', 'Chưa trả lời'],
            datasets: [{
                data: [repliedCount, unansweredCount],
                backgroundColor: ['#36A2EB', '#FFCE56']
            }]
        }
    });
}

function countFeedbackStats(feedbackData) {
    let unansweredCount = 0;
    let answeredCount = 0;

    feedbackData.forEach((feedback) => {
        if (feedback.reply) {
            answeredCount++;
        } else {
            unansweredCount++;
        }
    });

    document.getElementById('unansweredCount').textContent = unansweredCount;
    document.getElementById('answeredCount').textContent = answeredCount;
}


// Hàm để xử lý dữ liệu cho biểu đồ theo ngày
function processDataForDailyChart(data) {
    const dailyData = {
        labels: [], // Mảng chứa nhãn ngày
        values: []  // Mảng chứa số lượng feedback tương ứng với mỗi ngày
    };

    // Group feedback theo ngày
    const feedbackByDate = data.reduce((acc, feedback) => {
        const date = new Date(feedback.timestamp).toLocaleDateString(); // Điều chỉnh dựa trên timestamp hoặc trường ngày khác nếu cần

        if (!acc[date]) {
            acc[date] = 0;
        }

        acc[date] += 1;
        return acc;
    }, {});

    // Chuyển dữ liệu từ object thành mảng
    Object.keys(feedbackByDate).forEach(date => {
        dailyData.labels.push(date);
        dailyData.values.push(feedbackByDate[date]);
    });

    return dailyData;
}

// Hàm để vẽ biểu đồ theo ngày
function drawDailyFeedbackChart(feedbackData) {
    try {
        const currentDate = new Date();
        const currentDateString = currentDate.toISOString().split("T")[0];
        const feedbackByDate = feedbackData.filter(feedback => {
            const feedbackDateString = new Date(feedback.timestamp).toISOString().split("T")[0];
            return feedbackDateString === currentDateString;
        });

        const dailyData = processDataForDailyChart(feedbackByDate);

        const dailyChartCanvas = document.getElementById('dailyFeedbackChart');
        const dailyChartContext = dailyChartCanvas.getContext('2d');

        new Chart(dailyChartContext, {
            type: 'bar',
            data: {
                labels: dailyData.labels,
                datasets: [{
                    label: 'Số lượng phản hồi',
                    data: dailyData.values,
                    backgroundColor: 'rgba(75, 192, 192, 0.2)',
                    borderColor: 'rgba(75, 192, 192, 1)',
                    borderWidth: 1
                }]
            },
            options: {
                scales: {
                    y: {
                        beginAtZero: true
                    }
                }
            }
        });
    } catch (error) {
        console.error("Lỗi khi vẽ biểu đồ theo ngày: " + error.message);
    }
}

// Hàm lấy dữ liệu phản hồi theo tháng
async function getFeedbackByMonth(month) {
    try {
        const snapshot = await feedbackRef.orderByChild("month").equalTo(month).once("value");
        const feedbackData = snapshot.val() || {};

        // Chuyển đổi dữ liệu từ object thành mảng
        const feedbackArray = Object.keys(feedbackData).map(key => {
            return {
                key: key,
                ...feedbackData[key]
            };
        });

        return feedbackArray;
    } catch (error) {
        console.error("Lỗi khi lấy dữ liệu phản hồi theo tháng từ Firebase: " + error.message);
        return [];
    }
}

// Hàm để xử lý dữ liệu cho biểu đồ theo tháng
function processDataForMonthlyChart(data) {
    const monthlyData = {
        labels: [], // Mảng chứa nhãn tháng
        values: []  // Mảng chứa số lượng feedback tương ứng với mỗi tháng
    };

    // Group feedback theo tháng
    const feedbackByMonth = data.reduce((acc, feedback) => {
        const month = new Date(feedback.timestamp).getMonth() + 1; // Tháng bắt đầu từ 0

        if (!acc[month]) {
            acc[month] = 0;
        }

        acc[month] += 1;
        return acc;
    }, {});

    // Chuyển dữ liệu từ object thành mảng
    Object.keys(feedbackByMonth).forEach(month => {
        monthlyData.labels.push(month);
        monthlyData.values.push(feedbackByMonth[month]);
    });

    return monthlyData;
}
// Hàm để vẽ biểu đồ theo tháng
async function drawMonthlyFeedbackChart() {
    try {
        // Lấy dữ liệu phản hồi theo tháng (ví dụ: tháng hiện tại)
        const currentDate = new Date();
        const monthlyFeedbackData = await getFeedbackByMonth(currentDate.getMonth() + 1); // Tháng bắt đầu từ 0

        const monthlyData = processDataForMonthlyChart(monthlyFeedbackData);

        // Lấy canvas và context
        const monthlyChartCanvas = document.getElementById('monthlyFeedbackChart');
        const monthlyChartContext = monthlyChartCanvas.getContext('2d');

        // Kiểm tra xem có dữ liệu để hiển thị hay không
        if (monthlyData.labels.length === 0 || monthlyData.values.length === 0) {
            // Ẩn hoặc xử lý một cách thích hợp (ví dụ: hiển thị thông báo)
            console.log("Không có dữ liệu để hiển thị");
            return;
        }

        // Vẽ biểu đồ
        new Chart(monthlyChartContext, {
            type: 'bar',
            data: {
                labels: monthlyData.labels,
                datasets: [{
                    label: 'Số lượng phản hồi',
                    data: monthlyData.values,
                    backgroundColor: 'rgba(255, 255, 0, 1)',
                    borderColor: 'rgba(255, 255, 0, 1)',
                    borderWidth: 1
                }]
            },
            options: {
                scales: {
                    y: {
                        beginAtZero: true
                    }
                }
            }
        });
    } catch (error) {
        console.error("Lỗi khi vẽ biểu đồ theo tháng: " + error.message);
    }
}

// Hàm lấy dữ liệu phản hồi theo năm
async function getFeedbackByYear(year) {
    try {
        const snapshot = await feedbackRef.orderByChild("year").equalTo(year).once("value");
        const feedbackData = snapshot.val() || {};

        // Chuyển đổi dữ liệu từ object thành mảng
        const feedbackArray = Object.keys(feedbackData).map(key => {
            return {
                key: key,
                ...feedbackData[key]
            };
        });

        return feedbackArray;
    } catch (error) {
        console.error("Lỗi khi lấy dữ liệu phản hồi theo năm từ Firebase: " + error.message);
        return [];
    }
}
// Hàm để xử lý dữ liệu cho biểu đồ theo năm
function processDataForYearlyChart(data) {
    const yearlyData = {
        labels: [], // Mảng chứa nhãn năm
        values: []  // Mảng chứa số lượng feedback tương ứng với mỗi năm
    };

    // Group feedback theo năm
    const feedbackByYear = data.reduce((acc, feedback) => {
        const year = new Date(feedback.timestamp).getFullYear();

        if (!acc[year]) {
            acc[year] = 0;
        }

        acc[year] += 1;
        return acc;
    }, {});

    // Chuyển dữ liệu từ object thành mảng
    Object.keys(feedbackByYear).forEach(year => {
        yearlyData.labels.push(year);
        yearlyData.values.push(feedbackByYear[year]);
    });

    return yearlyData;
}
// Hàm để vẽ biểu đồ theo năm
async function drawYearlyFeedbackChart() {
    try {
        // Lấy dữ liệu phản hồi theo năm (ví dụ: năm hiện tại)
        const currentDate = new Date();
        const yearlyFeedbackData = await getFeedbackByYear(currentDate.getFullYear());

        const yearlyData = processDataForYearlyChart(yearlyFeedbackData);

        // Lấy canvas và context
        const yearlyChartCanvas = document.getElementById('yearlyFeedbackChart');
        const yearlyChartContext = yearlyChartCanvas.getContext('2d');

        // Kiểm tra xem có dữ liệu để hiển thị hay không
        if (yearlyData.labels.length === 0 || yearlyData.values.length === 0) {
            // Ẩn hoặc xử lý một cách thích hợp (ví dụ: hiển thị thông báo)
            console.log("Không có dữ liệu để hiển thị");
            return;
        }

        // Vẽ biểu đồ
        new Chart(yearlyChartContext, {
            type: 'bar',
            data: {
                labels: yearlyData.labels,
                datasets: [{
                    label: 'Số lượng phản hồi',
                    data: yearlyData.values,
                    backgroundColor: 'rgba(255, 99, 132, 0.2)',
                    borderColor: 'rgba(255, 99, 132, 1)',
                    borderWidth: 1
                }]
            },
            options: {
                scales: {
                    y: {
                        beginAtZero: true
                    }
                }
            }
        });
    } catch (error) {
        console.error("Lỗi khi vẽ biểu đồ theo năm: " + error.message);
    }
}


  window.onload = async function () {
        await getAllFeedbackAndDrawCharts();
    };

  async function getAllFeedbackAndDrawCharts() {
        try {
            const feedbackData = await getAllFeedback();
          
            updateStatistics(feedbackData);
            countFeedbackStats(feedbackData);

           drawDailyFeedbackChart(feedbackData); // Vẽ biểu đồ theo ngày
           drawMonthlyFeedbackChart(); //
           drawYearlyFeedbackChart(); // Vẽ biểu đồ theo năm
        } catch (error) {
            console.error("Lỗi khi lấy và vẽ dữ liệu phản hồi: " + error.message);
        }
    }


</script>
</body>
</html>
