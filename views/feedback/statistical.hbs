<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Feedback Page</title>
    <!-- Add your CSS links here -->
    <style>
        /* Style for the table */
        body {
    font-family: 'Arial', sans-serif;
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}
.table {
    width: 100%;
    border-collapse: collapse;
    margin-top: 20px;
}

.table th, .table td {
    border: 1px solid #dddddd;
    text-align: left;
    padding: 8px;
}

.table th {
    background-color: #f2f2f2;
}

/* Style for pagination */
.pagination {
    display: flex;
    list-style: none;
    padding: 0;
    justify-content: center;
    margin-top: 20px;
}

.pagination li {
    margin-right: 5px;
    cursor: pointer;
    color: #fff;
    border: 1px solid #007bff;
    padding: 5px 10px;
    border-radius: 3px;
}
.pagination a {
    text-decoration: none;
}

.pagination li:hover {
    background-color: #0056b3;
    color: #fff;
}
.modal-content {
    max-width: 500px;
    margin: auto;
    padding: 20px;
    background-color: #fff;
    border: 1px solid #ccc;
    border-radius: 5px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
}
#feedbackChart {
    width: 100%; /* Chiếm toàn bộ chiều rộng của phần tử chứa nó */
    max-width: 400px; /* Giới hạn chiều rộng tối đa */
    height: auto; /* Tự động điều chỉnh chiều cao theo tỷ lệ */
    margin: 20px 0; /* Tạo khoảng cách với các phần tử khác */
    border: 1px solid #ddd; /* Thêm đường viền */
    border-radius: 8px; /* Bo tròn góc */
    display: block; /* Hiển thị là một khối */
    margin-left: auto; /* Canh lề trái tự động */
    margin-right: auto; /* Canh lề phải tự động */
}

.form-group {
    margin-bottom: 15px;
}
/* Tùy chỉnh màu sắc cho trạng thái "Đã trả lời" */
.text-success {
    color: green;
}

/* Tùy chỉnh màu sắc cho trạng thái "Chưa trả lời" */
.text-warning {
    color: orange;
}
/* CSS cho Canvas của biểu đồ theo ngày */
#dailyFeedbackChart {
    max-width: 300px;
    margin: 20px auto;
    border: 1px solid #ddd;
    border-radius: 8px;
}

/* CSS cho biểu đồ bên trong canvas */
#dailyFeedbackChart canvas {
    width: 100% !important;
    height: auto !important;
}
/* CSS cho Canvas của biểu đồ theo ngày */
#monthlyFeedbackChart {
    max-width: 300px;
    margin: 20px auto;
    border: 1px solid #ddd;
    border-radius: 8px;
}

/* CSS cho biểu đồ bên trong canvas */
#monthlyFeedbackChart canvas {
    width: 100% !important;
    height: auto !important;
}
/* CSS cho Canvas của biểu đồ theo ngày */
#yearlyFeedbackChart {
    max-width: 300px;
    margin: 20px auto;
    border: 1px solid #ddd;
    border-radius: 8px;
}


/* CSS cho biểu đồ bên trong canvas */
#yearlyFeedbackChart canvas {
    width: 100% !important;
    height: auto !important;
}


    </style>
</head>
<body>
     <nav style="background-color: rgb(199, 199, 199);" class="navbar navbar-expand-lg bg-body-tertiary">
  <div class="container-fluid">
    <a class="navbar-brand" href="./feedback">Góp Ý Từ Người Dùng</a>
    <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
      <span class="navbar-toggler-icon"></span>
    </button>
    <div class="collapse navbar-collapse" id="navbarSupportedContent">
      <ul class="navbar-nav me-auto mb-2 mb-lg-0">
          <li class="nav-item">
          <a class="nav-link active" aria-current="page" href="#">Thống Kê Phản Hồi Từ Người Dùng</a>
        </li>
      </ul>
     <form style="margin-right: 50px;" class="d-flex" role="search" id="searchForm">
    <input class="form-control me-2" type="search" placeholder="Search" aria-label="Search" id="searchInput">
    <button class="btn btn-outline-success" type="submit">Search</button>
</form>

<div style="display: flex; width: 150px;">
    
    <select class="form-select" id="filterStatus">
        <option value="all">Tất cả</option>
        <option value="replied">Đã trả lời</option>
        <option value="unreplied">Chưa trả lời</option>
    </select>
</div>
<button style="width: 100px; margin-left: 20px;" class="btn btn-primary" onclick="applyFilters()">Áp dụng</button>

    </div>
  </div>
</nav>

    <!-- Display feedback from Firebase here -->
        <table class="table table-bordered mt-4">
            <thead>
                <tr>
                    <th>id</th>
                    <th>Email</th>
                    <th>Tên người dùng</th>
                    <th>Số điện thoại</th>
                    <th>Nội dung phản hồi</th>
                    <th>Trạng Thái</th>
                    <th>Chức năng</th>
                </tr>
            </thead>
            <tbody id="feedbackTable"></tbody>
        </table>
        
        <ul class="pagination" id="pagination"></ul>

<div style="margin-left: 20px;">
    Feedback chưa trả lời: <span style="color: #007bff;" id="unansweredCount">0</span>
</div>
<div style="margin-left: 20px;">
   Feedback đã trả lời:  <span style="color: #36a2eb;" id="answeredCount">0</span>
</div>

<canvas id="feedbackChart" width="400" height="200"></canvas>
<p style="text-align: center;">1.1 Biều Đồ Thống Kê Trả Lời Feedback</p>



<div class="row">
    <div class="col-md-6">
      <!-- Canvas for Daily Feedback Chart -->
<canvas id="dailyFeedbackChart" width="500" height="500"></canvas>
<p style="text-align: center;">2.1 Biều Đồ Thống Kê Feedback Theo Ngày</p>
        </div>
        <div class="col-md-6">
           <!-- Canvas for Monthly Feedback Chart -->
<canvas id="monthlyFeedbackChart" width="500" height="500"></canvas>
<p style="text-align: center;">2.2 Biều Đồ Thống Kê Feedback Theo Tháng</p>
            </div>
      <div class="col-md-6">
                <!-- Canvas for Yearly Feedback Chart -->
<canvas id="yearlyFeedbackChart" width="500" height="500"></canvas>
<p style="text-align: center;">2.3 Biều Đồ Thống Kê Feedback Theo Năm</p>
                </div>
        </div>
          
          
    



<!-- Thêm modal vào body -->
<div class="modal fade" id="replyModal" tabindex="-1" role="dialog" aria-labelledby="replyModalLabel" aria-hidden="true">
   <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="replyModalLabel">Trả Lời Feedback</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <!-- Form Trả lời -->
                <form id="replyForm">

                       <div class="form-group">
                        <label for="sendername">Người Gửi:</label>
                        <input type="text" class="form-control" id="sendername" required>
                        </div>

                        <div class="form-group">
                        <label for="to">Email Nhận:</label>
                        <input type="text" class="form-control" id="to" required>
                        </div>
                        <div class="form-group">
                        <label for="replyto">Email Gửi:</label>
                        <input type="text" class="form-control" id="replyto" required>
                        </div>

                        <div class="form-group">
                        <label for="subject">Chủ Đề:</label>
                        <input type="text" class="form-control" id="subject" required>
                        </div>

                        <div class="form-group">
                        <label for="greeting">Bắt Đầu:</label>
                        <input type="text" class="form-control" id="greeting" required>
                        </div>

                        <div class="form-group">
                        <label for="message">Nội dung trả lời:</label>
                        <textarea class="form-control" id="message" required></textarea>
                        </div>

                        <div class="form-group">
                        <label for="thankyou">Kết Thúc:</label>
                        <input type="text" class="form-control" id="thankyou" value="" required>
                        </div>

                    <button type="submit" class="btn btn-primary">Gửi</button>
                </form>
            </div>
        </div>
    </div>
</div>


    <!-- Add your JavaScript links here -->
     <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.6/dist/umd/popper.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.min.js"></script>
<!-- Firebase JavaScript SDK -->
  <script src="https://www.gstatic.com/firebasejs/8.8.0/firebase-app.js"></script>
  <script src="https://www.gstatic.com/firebasejs/8.8.0/firebase-database.js"></script>
   <script src="https://cdn.jsdelivr.net/npm/@emailjs/browser@3/dist/email.min.js"></script>
   <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<script>
    const firebaseConfig = {
        apiKey: "AIzaSyCZgZP878mOAM2ec-hz1WFwORxSw_J6d2k",
        authDomain: "soundbox-du-an-md31.firebaseapp.com",
        databaseURL: "https://soundbox-du-an-md31-default-rtdb.firebaseio.com",
        projectId: "soundbox-du-an-md31",
        storageBucket: "soundbox-du-an-md31.appspot.com",
        messagingSenderId: "265264289877",
        appId: "1:265264289877:web:0f88e2fa54c638685e9cdc",
        measurementId: "G-FE9Z9NKJDR"
    };

     firebase.initializeApp(firebaseConfig);

    const database = firebase.database();
    const feedbackRef = database.ref("feedback");

    let allFeedbacks = [];
    const feedbackTable = document.getElementById('feedbackTable');
    const pagination = document.getElementById('pagination');
    const itemsPerPage = 5;
    let currentPage = 1;

    const replyModal = new bootstrap.Modal(document.getElementById('replyModal'));
    const replyForm = document.getElementById('replyForm');

 // Hàm lấy tất cả dữ liệu phản hồi
async function getAllFeedback() {
    try {
        const snapshot = await feedbackRef.once("value");
        const feedbackData = snapshot.val() || {};

        // Chuyển đổi dữ liệu từ object thành mảng
        const feedbackArray = Object.keys(feedbackData).map(key => ({
            key: key,
            ...feedbackData[key]
        }));

        return feedbackArray;
    } catch (error) {
        throw new Error("Lỗi khi lấy dữ liệu từ Firebase: " + error.message);
    }
}



   function displayFeedback(feedbackData) {
        // Sắp xếp danh sách phản hồi theo thời gian giảm dần
    feedbackData.sort((a, b) => b.timestamp - a.timestamp);

        console.log("Feedback Data:", feedbackData);
        feedbackTable.innerHTML = "";
        const startAt = (currentPage - 1) * itemsPerPage;
       const feedbackOnCurrentPage = feedbackData.slice(startAt, startAt + itemsPerPage);

        feedbackOnCurrentPage.forEach((feedback, index) => {
            const row = feedbackTable.insertRow();
            const idCell = row.insertCell(0);
            const emailCell = row.insertCell(1);
            const usernameCell = row.insertCell(2);
            const phoneCell = row.insertCell(3);
            const commentCell = row.insertCell(4);
            const replyStatusCell = row.insertCell(5);
            const actionCell = row.insertCell(6);


            idCell.textContent = startAt + index + 1;
            emailCell.textContent = feedback.email || "";
            usernameCell.textContent = feedback.name || "";
            phoneCell.textContent = feedback.phone || "";
            commentCell.textContent = feedback.comment || "";

            if (feedback.reply) {
                replyStatusCell.textContent = "Đã trả lời";
                replyStatusCell.classList.add("text-success"); 
            } else {
                replyStatusCell.textContent = "Chưa trả lời";
                replyStatusCell.classList.add("text-warning");
            }


            const deleteButton = document.createElement("button");
            deleteButton.textContent = "Xóa";
            deleteButton.classList.add("btn", "btn-danger");
            deleteButton.addEventListener("click", () => {
                const feedbackKeyToDelete = feedback.key;
                const confirmDelete = confirm("Bạn có chắc chắn muốn xóa phản hồi này?");
                if (confirmDelete) {
                    feedbackRef.child(feedbackKeyToDelete).remove()
                        .then(() => {
                            getAllFeedback().then(displayFeedback);
                            alert("Xóa Thành Công");
                        })
                        .catch((error) => {
                            console.error("Lỗi khi xóa phản hồi: " + error.message);
                        });
                }
            });
            actionCell.appendChild(deleteButton);

        const replyButton = document.createElement("button");
        if (feedback.reply) {
        replyButton.textContent = "Trả lời Lại";
        replyButton.classList.add("btn", "btn-warning");
        replyButton.addEventListener("click", () => {
            // Gọi hàm để hiển thị hộp thoại hoặc form để sửa nội dung trả lời
            showReplyDialog(feedback);
        });
          } else {
        replyButton.textContent = "Trả lời";
        replyButton.classList.add("btn", "btn-primary");
        replyButton.addEventListener("click", () => {
            // Gọi hàm để hiển thị hộp thoại hoặc form để nhập nội dung trả lời
            showReplyDialog(feedback);
        });
          }
         actionCell.appendChild(replyButton);
            
        });

         updatePaginationButtons(feedbackData.length);
    }

 // Hàm cập nhật nút phân trang
function updatePaginationButtons(totalItems) {
    pagination.innerHTML = "";
    const totalPages = Math.ceil(totalItems / itemsPerPage);

    if (totalPages === 0) {
        console.log("Không có trang nào để hiển thị.");
        return;
    }

    // Tạo nút Previous
    const previousButton = document.createElement("li");
    previousButton.innerHTML = '<a href="#" aria-label="Previous">&laquo;</a>';
    previousButton.addEventListener("click", () => {
        if (currentPage > 1) {
            currentPage--;
            searchFeedback(); // Thực hiện tìm kiếm sau khi cập nhật trang
        }
    });
    pagination.appendChild(previousButton);

    // Tạo nút trang đầu tiên
    const firstPageButton = document.createElement("li");
    firstPageButton.innerHTML = '<a href="#">1</a>';
    firstPageButton.addEventListener("click", () => {
        currentPage = 1;
        searchFeedback(); // Thực hiện tìm kiếm sau khi cập nhật trang
    });
    pagination.appendChild(firstPageButton);

    // Tạo các nút trang
    for (let i = Math.max(2, currentPage - 2); i <= Math.min(totalPages - 1, currentPage + 2); i++) {
        const pageItem = document.createElement("li");
        pageItem.innerHTML = `<a href="#">${i}</a>`;
        pageItem.addEventListener("click", () => {
            currentPage = i;
            searchFeedback(); // Thực hiện tìm kiếm sau khi cập nhật trang
        });
        pagination.appendChild(pageItem);
    }

    // Tạo nút trang cuối cùng
    const lastPageButton = document.createElement("li");
    lastPageButton.innerHTML = `<a href="#">${totalPages}</a>`;
    lastPageButton.addEventListener("click", () => {
        currentPage = totalPages;
        searchFeedback(); // Thực hiện tìm kiếm sau khi cập nhật trang
    });
    pagination.appendChild(lastPageButton);

    // Tạo nút Next
    const nextButton = document.createElement("li");
    nextButton.innerHTML = '<a href="#" aria-label="Next">&raquo;</a>';
    nextButton.addEventListener("click", () => {
        if (currentPage < totalPages) {
            currentPage++;
            searchFeedback(); // Thực hiện tìm kiếm sau khi cập nhật trang
        }
    });
    pagination.appendChild(nextButton);
}

// Hàm tìm kiếm phản hồi
function searchFeedback() {
    // Lấy giá trị từ ô tìm kiếm
    const searchKeyword = document.getElementById('searchInput').value.toLowerCase();

    // Lọc và hiển thị phản hồi dựa trên từ khóa tìm kiếm
    getAllFeedback().then((feedbackData) => {
        const filteredFeedbacks = feedbackData.filter((feedback) => {
            return (
                feedback.email.toLowerCase().includes(searchKeyword) ||
                feedback.name.toLowerCase().includes(searchKeyword)
            );
        });
        displayFeedback(filteredFeedbacks);
    });
}



// Thêm sự kiện cho form
const searchForm = document.getElementById('searchForm');
searchForm.addEventListener('submit', (event) => {
    event.preventDefault(); // Ngăn chặn hành động mặc định của form
    currentPage = 1; // Đặt lại trang về 1 khi thực hiện tìm kiếm
    searchFeedback();
});

// Thêm sự kiện cho nút lọc
function applyFilters() {
    const statusFilter = document.getElementById('filterStatus').value;

    // Lọc phản hồi dựa trên trạng thái được chọn
    getAllFeedback().then((feedbackData) => {
        let filteredFeedbacks = [];
        if (statusFilter === 'all') {
            filteredFeedbacks = feedbackData;
        } else if (statusFilter === 'replied') {
            filteredFeedbacks = feedbackData.filter((feedback) => feedback.reply);
        } else if (statusFilter === 'unreplied') {
            filteredFeedbacks = feedbackData.filter((feedback) => !feedback.reply);
        }

        displayFeedback(filteredFeedbacks);
    });
}



// Hàm để cập nhật biểu đồ thống kê
function updateStatistics(feedbackData) {
    const repliedCount = feedbackData.filter(feedback => feedback.reply).length;
    const unansweredCount = feedbackData.length - repliedCount;

    // Sử dụng Chart.js để tạo biểu đồ
    const ctx = document.getElementById('feedbackChart').getContext('2d');
    const chart = new Chart(ctx, {
        type: 'pie',
        data: {
            labels: ['Đã trả lời', 'Chưa trả lời'],
            datasets: [{
                data: [repliedCount, unansweredCount],
                backgroundColor: ['#36A2EB', '#FFCE56']
            }]
        }
    });
}




    function showReplyDialog(feedback) {
        // Mở modal
        replyModal.show();


        // Gắn sự kiện cho nút "x" để đóng modal
        const closeButton = document.querySelector("#replyModal .close");
        closeButton.addEventListener("click", () => {
            // Đóng modal khi nhấn nút "x"
            replyModal.hide();
        });

         // Cập nhật giá trị mặc định cho ô input "Email người gửi"
        const sendernameInput = document.getElementById('sendername');
        sendernameInput.value = `App Music Soundbox`;

         // Cập nhật giá trị mặc định cho ô input "Email người gửi"
        const tonameInput = document.getElementById('to');
        tonameInput.value = `${feedback.email}`;

         // Cập nhật giá trị mặc định cho ô input "Email người nhận"
        const replytoInput = document.getElementById('replyto');
        replytoInput.value = `lupanpvd273@gmail.com`;

        // Cập nhật giá trị mặc định cho ô input "Email người nhận"
        const subjectInput = document.getElementById('subject');
        subjectInput.value = `Phản Hồi Feedback App Music Soundbox`;


        // Cập nhật giá trị mặc định cho ô input "Lời chào"
        const greetingInput = document.getElementById('greeting');
        greetingInput.value = `Xin chào: ${feedback.name}, chúng tôi là nhà phát triển ứng dụng nghe nhạc Music Soundbox. Cảm ơn bạn đã đóng góp ý kiến về ứng dụng của chúng tôi.`;

        // Cập nhật giá trị mặc định cho ô input "Lời cảm ơn"
        const thanksInput = document.getElementById('thankyou');
        thanksInput.value = 'Một lần nữa chúng tôi cảm ơn bạn đã góp ý kiến về ứng dụng của chúng tôi.';

        // Gửi form khi nhấn nút Gửi
        replyForm.addEventListener('submit', (event) => {
            event.preventDefault();

            // Lấy giá trị từ các input
            const greeting = greetingInput.value;
            const replyContent = document.getElementById('message').value;
            const thankYou = thanksInput.value;
            const sendername = sendernameInput.value;
            const toname = tonameInput.value;
            const subject = subjectInput.value;
            const replytoemail = replytoInput.value;

            // Lưu trạng thái reply và nội dung trả lời vào cơ sở dữ liệu
            feedbackRef.child(feedback.key).update({
                reply: true,
                greeting: greeting,
                replyContent: replyContent,
                thankYou: thankYou,
                sendername: sendername,
                toname: toname,
                subject: subject
            }).then(() => {
                alert("Trả lời thành công!");
                // Gửi email với nội dung trả lời
                sendEmail();
                getAllFeedback().then(displayFeedback);
                // Đóng modal sau khi gửi
                replyModal.hide();
            }).catch((error) => {
                console.error("Lỗi khi trả lời: " + error.message);
            });
        });
    }

   function sendEmail() {
    (function () {
        emailjs.init("F6FpioINBzzIF7lJC"); // Thay thế bằng User ID của bạn
    })();

   const params = {
        sendername: document.querySelector("#sendername").value,
        to: document.querySelector("#to").value,
        subject: document.querySelector("#subject").value,
        replyto: document.querySelector("#replyto").value,
        message: document.querySelector("#message").value, // Thay đổi tên của trường tùy thuộc vào cách bạn đặt tên trong template
        greeting: document.querySelector("#greeting").value,
        thankyou: document.querySelector("#thankyou").value,
    };

    const serviceID = "service_jeg21qt"; // Thay thế bằng Service ID của bạn
    const templateID = "template_xrg5997"; // Thay thế bằng Template ID của bạn

    emailjs.send(serviceID, templateID, params)
        .then((res) => {
            alert("Email sent successfully!!");
        })
        .catch((error) => {
            console.error("Error sending email:", error);
        });
}


function countFeedbackStats(feedbackData) {
    let unansweredCount = 0;
    let answeredCount = 0;

    feedbackData.forEach((feedback) => {
        if (feedback.reply) {
            answeredCount++;
        } else {
            unansweredCount++;
        }
    });

    document.getElementById('unansweredCount').textContent = unansweredCount;
    document.getElementById('answeredCount').textContent = answeredCount;
}

// Hàm lấy dữ liệu phản hồi theo ngày
async function getFeedbackByDate(date) {
    try {
        const snapshot = await feedbackRef.orderByChild("timestamp").equalTo(date).once("value");
        const feedbackData = snapshot.val() || {};

        // Chuyển đổi dữ liệu từ object thành mảng
        const feedbackArray = Object.keys(feedbackData).map(key => {
            return {
                key: key,
                ...feedbackData[key]
            };
        });

        return feedbackArray;
    } catch (error) {
        console.error("Lỗi khi lấy dữ liệu phản hồi theo ngày từ Firebase: " + error.message);
        return [];
    }
}
// Hàm để xử lý dữ liệu cho biểu đồ theo ngày
function processDataForDailyChart(data) {
    const dailyData = {
        labels: [], // Mảng chứa nhãn ngày
        values: []  // Mảng chứa số lượng feedback tương ứng với mỗi ngày
    };

    // Group feedback theo ngày
    const feedbackByDate = data.reduce((acc, feedback) => {
        const date = new Date(feedback.timestamp).toLocaleDateString(); // Điều chỉnh dựa trên timestamp hoặc trường ngày khác nếu cần

        if (!acc[date]) {
            acc[date] = 0;
        }

        acc[date] += 1;
        return acc;
    }, {});

    // Chuyển dữ liệu từ object thành mảng
    Object.keys(feedbackByDate).forEach(date => {
        dailyData.labels.push(date);
        dailyData.values.push(feedbackByDate[date]);
    });

    return dailyData;
}

// Hàm để vẽ biểu đồ theo ngày
function drawDailyFeedbackChart(feedbackData) {
    try {
        const currentDate = new Date();
        const currentDateString = currentDate.toISOString().split("T")[0];
        const feedbackByDate = feedbackData.filter(feedback => {
            const feedbackDateString = new Date(feedback.timestamp).toISOString().split("T")[0];
            return feedbackDateString === currentDateString;
        });

        const dailyData = processDataForDailyChart(feedbackByDate);

        const dailyChartCanvas = document.getElementById('dailyFeedbackChart');
        const dailyChartContext = dailyChartCanvas.getContext('2d');

        new Chart(dailyChartContext, {
            type: 'bar',
            data: {
                labels: dailyData.labels,
                datasets: [{
                    label: 'Số lượng phản hồi',
                    data: dailyData.values,
                    backgroundColor: 'rgba(75, 192, 192, 0.2)',
                    borderColor: 'rgba(75, 192, 192, 1)',
                    borderWidth: 1
                }]
            },
            options: {
                scales: {
                    y: {
                        beginAtZero: true
                    }
                }
            }
        });
    } catch (error) {
        console.error("Lỗi khi vẽ biểu đồ theo ngày: " + error.message);
    }
}

// Hàm lấy dữ liệu phản hồi theo tháng
async function getFeedbackByMonth(month) {
    try {
        const snapshot = await feedbackRef.orderByChild("month").equalTo(month).once("value");
        const feedbackData = snapshot.val() || {};

        // Chuyển đổi dữ liệu từ object thành mảng
        const feedbackArray = Object.keys(feedbackData).map(key => {
            return {
                key: key,
                ...feedbackData[key]
            };
        });

        return feedbackArray;
    } catch (error) {
        console.error("Lỗi khi lấy dữ liệu phản hồi theo tháng từ Firebase: " + error.message);
        return [];
    }
}

// Hàm để xử lý dữ liệu cho biểu đồ theo tháng
function processDataForMonthlyChart(data) {
    const monthlyData = {
        labels: [], // Mảng chứa nhãn tháng
        values: []  // Mảng chứa số lượng feedback tương ứng với mỗi tháng
    };

    // Group feedback theo tháng
    const feedbackByMonth = data.reduce((acc, feedback) => {
        const month = new Date(feedback.timestamp).getMonth() + 1; // Tháng bắt đầu từ 0

        if (!acc[month]) {
            acc[month] = 0;
        }

        acc[month] += 1;
        return acc;
    }, {});

    // Chuyển dữ liệu từ object thành mảng
    Object.keys(feedbackByMonth).forEach(month => {
        monthlyData.labels.push(month);
        monthlyData.values.push(feedbackByMonth[month]);
    });

    return monthlyData;
}
// Hàm để vẽ biểu đồ theo tháng
async function drawMonthlyFeedbackChart() {
    try {
        // Lấy dữ liệu phản hồi theo tháng (ví dụ: tháng hiện tại)
        const currentDate = new Date();
        const monthlyFeedbackData = await getFeedbackByMonth(currentDate.getMonth() + 1); // Tháng bắt đầu từ 0

        const monthlyData = processDataForMonthlyChart(monthlyFeedbackData);

        // Lấy canvas và context
        const monthlyChartCanvas = document.getElementById('monthlyFeedbackChart');
        const monthlyChartContext = monthlyChartCanvas.getContext('2d');

        // Kiểm tra xem có dữ liệu để hiển thị hay không
        if (monthlyData.labels.length === 0 || monthlyData.values.length === 0) {
            // Ẩn hoặc xử lý một cách thích hợp (ví dụ: hiển thị thông báo)
            console.log("Không có dữ liệu để hiển thị");
            return;
        }

        // Vẽ biểu đồ
        new Chart(monthlyChartContext, {
            type: 'bar',
            data: {
                labels: monthlyData.labels,
                datasets: [{
                    label: 'Số lượng phản hồi',
                    data: monthlyData.values,
                    backgroundColor: 'rgba(255, 99, 132, 0.2)',
                    borderColor: 'rgba(255, 99, 132, 1)',
                    borderWidth: 1
                }]
            },
            options: {
                scales: {
                    y: {
                        beginAtZero: true
                    }
                }
            }
        });
    } catch (error) {
        console.error("Lỗi khi vẽ biểu đồ theo tháng: " + error.message);
    }
}

// Hàm lấy dữ liệu phản hồi theo năm
async function getFeedbackByYear(year) {
    try {
        const snapshot = await feedbackRef.orderByChild("year").equalTo(year).once("value");
        const feedbackData = snapshot.val() || {};

        // Chuyển đổi dữ liệu từ object thành mảng
        const feedbackArray = Object.keys(feedbackData).map(key => {
            return {
                key: key,
                ...feedbackData[key]
            };
        });

        return feedbackArray;
    } catch (error) {
        console.error("Lỗi khi lấy dữ liệu phản hồi theo năm từ Firebase: " + error.message);
        return [];
    }
}
// Hàm để xử lý dữ liệu cho biểu đồ theo năm
function processDataForYearlyChart(data) {
    const yearlyData = {
        labels: [], // Mảng chứa nhãn năm
        values: []  // Mảng chứa số lượng feedback tương ứng với mỗi năm
    };

    // Group feedback theo năm
    const feedbackByYear = data.reduce((acc, feedback) => {
        const year = new Date(feedback.timestamp).getFullYear();

        if (!acc[year]) {
            acc[year] = 0;
        }

        acc[year] += 1;
        return acc;
    }, {});

    // Chuyển dữ liệu từ object thành mảng
    Object.keys(feedbackByYear).forEach(year => {
        yearlyData.labels.push(year);
        yearlyData.values.push(feedbackByYear[year]);
    });

    return yearlyData;
}
// Hàm để vẽ biểu đồ theo năm
async function drawYearlyFeedbackChart() {
    try {
        // Lấy dữ liệu phản hồi theo năm (ví dụ: năm hiện tại)
        const currentDate = new Date();
        const yearlyFeedbackData = await getFeedbackByYear(currentDate.getFullYear());

        const yearlyData = processDataForYearlyChart(yearlyFeedbackData);

        // Lấy canvas và context
        const yearlyChartCanvas = document.getElementById('yearlyFeedbackChart');
        const yearlyChartContext = yearlyChartCanvas.getContext('2d');

        // Kiểm tra xem có dữ liệu để hiển thị hay không
        if (yearlyData.labels.length === 0 || yearlyData.values.length === 0) {
            // Ẩn hoặc xử lý một cách thích hợp (ví dụ: hiển thị thông báo)
            console.log("Không có dữ liệu để hiển thị");
            return;
        }

        // Vẽ biểu đồ
        new Chart(yearlyChartContext, {
            type: 'bar',
            data: {
                labels: yearlyData.labels,
                datasets: [{
                    label: 'Số lượng phản hồi',
                    data: yearlyData.values,
                    backgroundColor: 'rgba(255, 99, 132, 0.2)',
                    borderColor: 'rgba(255, 99, 132, 1)',
                    borderWidth: 1
                }]
            },
            options: {
                scales: {
                    y: {
                        beginAtZero: true
                    }
                }
            }
        });
    } catch (error) {
        console.error("Lỗi khi vẽ biểu đồ theo năm: " + error.message);
    }
}


  window.onload = async function () {
        await getAllFeedbackAndDrawCharts();
    };

  async function getAllFeedbackAndDrawCharts() {
        try {
            const feedbackData = await getAllFeedback();
            displayFeedback(feedbackData);
            updateStatistics(feedbackData);
            countFeedbackStats(feedbackData);

           drawDailyFeedbackChart(feedbackData); // Vẽ biểu đồ theo ngày
           drawMonthlyFeedbackChart(); //
           drawYearlyFeedbackChart(); // Vẽ biểu đồ theo năm
        } catch (error) {
            console.error("Lỗi khi lấy và vẽ dữ liệu phản hồi: " + error.message);
        }
    }


</script>
</body>
</html>
