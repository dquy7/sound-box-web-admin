<!DOCTYPE html>
<html>
<head>
    <title>Thống Kê Người Dùng</title>
       <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css">
     <link rel="stylesheet" href="https://pro.fontawesome.com/releases/v5.10.0/css/all.css">
     <style>
     #chartContainer {
            width: 300px;
            height: 400px;
            margin-left: 40%;
            margin-top: 20px;
            border: 1px solid #ccc;
            padding: 20px;
            border-radius: 8px;
            background-color: #fff;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
          
        }

        #registrationTimelineChart,
        #loginStatisticsChart {
              margin-top: 20px;
              border: 1px solid #ccc;
              padding: 20px;
              border-radius: 8px;
              background-color: #fff;
              box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
              text-align: center;
        }
        #monthlySubscriptionChart,
        #monthlyLoginChart {
            margin-top: 20px;
              border: 1px solid #ccc;
              padding: 20px;
              border-radius: 8px;
              background-color: #fff;
              box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
              text-align: center;
        }
          #YearlySubscriptionChart,
        #YearlyLoginChart {
            margin-top: 20px;
              border: 1px solid #ccc;
              padding: 20px;
              border-radius: 8px;
              background-color: #fff;
              box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
              text-align: center;
        }

        #userDistributionChart {
            width: 100%;
            max-width: 1000px;
            height: auto;
            margin: 20px auto;
            display: block;
        }

        #pieChart {
            width: 100%;
            height: 100%;
        }
        .box-Chart{
            display: flex;
            width: 100%;
            height: 400px;
        }
        .box-tkdk{
            width: 50%;
            height: 400px;
        }
         .box-tkdn{
            width: 50%;
            height: 400px;
        }

     </style>
</head>
<body>
     <nav style="background-color: aquamarine; height: 82px;" class="navbar navbar-expand-lg bg-body-tertiary">
  <div class="container-fluid">
    <a style="font-size: 30px; font-weight: bold;" class="navbar-brand" href="./revenue">Thống Kê Người Dùng</a>
    <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
      <span class="navbar-toggler-icon"></span>
    </button>
    <div class="collapse navbar-collapse" id="navbarSupportedContent">
      <ul class="navbar-nav me-auto mb-2 mb-lg-0">
        <li class="nav-item">
          <a class="nav-link active" aria-current="page" href="./statisticalmusic">Thống Kê Bài Hát</a>
        </li>
          <li class="nav-item">
          <a class="nav-link active" aria-current="page" href="./feedbackstatistical">Thống Kê Feedback</a>
        </li>
           </li>
          <li class="nav-item">
          <a class="nav-link active" aria-current="page" href="./tkrevenue">Thống Kê Doanh Thu</a>
        </li>
      </ul>
   
    </div>
  </div>
</nav>

 
        <!-- Thẻ Canvas cho biểu đồ tròn -->
        <!-- Thêm một thẻ để hiển thị tổng số người dùng -->
<div style="margin: 30px;" id="totalUsers">Tổng Số Người Dùng: Loading...</div>
<div style="margin-bottom: 100px;" id="chartContainer">
  <canvas id="pieChart"></canvas>
   <p style="margin-left: 70px">1. Thống Kê Tài Khoản</p>
</div>
<div class="box-Chart">
    <div class="box-tkdk">
    <canvas id="registrationTimelineChart" width="400" height="200"></canvas>
    <p style="text-align: center;">2.1. Thống Kê Đăng Ký Tài Khoản Theo Ngày</p>
    </div>
  <div class="box-tkdn">
<canvas id="loginStatisticsChart"></canvas>
 <p style="text-align: center;">2.2. Thống Kê Đăng Nhập Tài Khoản Theo Ngày</p>
</div>
</div>

<div class="box-Chart">
    <div class="box-tkdk">
        <canvas id="monthlySubscriptionChart" width="400" height="200"></canvas>
        <p style="text-align: center;">3.1. Thống Kê Đăng Ký Tài Khoản Theo Tháng</p>
    </div>
    <div class="box-tkdn">
        <canvas id="monthlyLoginChart" width="400" height="200"></canvas>
        <p style="text-align: center;">3.2. Thống Kê Đăng Nhập Tài Khoản Theo Tháng</p>
    </div>
</div>

<div class="box-Chart">
    <div class="box-tkdk">
        <canvas id="YearlySubscriptionChart" width="400" height="200"></canvas>
        <p style="text-align: center;">4.1. Thống Kê Đăng Ký Tài Khoản Theo Năm</p>
    </div>
    <div class="box-tkdn">
        <canvas id="YearlyLoginChart" width="400" height="200"></canvas>
        <p style="text-align: center;">4.2. Thống Kê Đăng Nhập Tài Khoản Theo Năm</p>
    </div>
</div>

<!-- Thư viện Chart.js -->

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
 <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.6/dist/umd/popper.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.min.js"></script>
<!-- Nếu bạn sử dụng adapter date-fns -->
<script src="https://cdn.jsdelivr.net/npm/chartjs-adapter-date-fns"></script>
<!-- Firebase JavaScript SDK -->
  <script src="https://www.gstatic.com/firebasejs/8.8.0/firebase-app.js"></script>
  <script src="https://www.gstatic.com/firebasejs/8.8.0/firebase-database.js"></script>

<script>
    const firebaseConfig = {
        apiKey: "AIzaSyCZgZP878mOAM2ec-hz1WFwORxSw_J6d2k",
        authDomain: "soundbox-du-an-md31.firebaseapp.com",
        databaseURL: "https://soundbox-du-an-md31-default-rtdb.firebaseio.com",
        projectId: "soundbox-du-an-md31",
        storageBucket: "soundbox-du-an-md31.appspot.com",
        messagingSenderId: "265264289877",
        appId: "1:265264289877:web:0f88e2fa54c638685e9cdc",
        measurementId: "G-FE9Z9NKJDR"
    };
    firebase.initializeApp(firebaseConfig);

    const database = firebase.database();
    const usersRef = database.ref("users");
    let totalUsers = 0;

  function calculateStatistics(users) {
  const totalUsers = users.length;
  const lockedUsers = users.filter(user => user.isLocked).length;
    const vipUsers = users.filter(user => user.isVIP).length;
  const regularUsers = totalUsers - vipUsers;

  return { totalUsers, lockedUsers, vipUsers, regularUsers };
}
    function displayPieChart(statistics) {
        const ctx = document.getElementById('pieChart').getContext('2d');

        const pieChart = new Chart(ctx, {
            type: 'pie',
            data: {
                labels: ['Người Dùng Bình Thường', 'Người Dùng VIP', 'Người Dùng Bị Khóa'],
                datasets: [{
                    data: [statistics.regularUsers, statistics.vipUsers, statistics.lockedUsers],
                    backgroundColor: ['#36A2EB', '#FFCE56', '#FF6384'],
                }],
            },
        });
    }

  function getAllUsers() {
        return usersRef.once("value").then((snapshot) => {
            const allUsers = [];
            snapshot.forEach((childSnapshot) => {
                const userData = childSnapshot.val();
                userData.key = childSnapshot.key;
                allUsers.push(userData);
            });
            return allUsers;
        }).catch((error) => {
            console.error("Lỗi khi lấy dữ liệu từ Firebase: " + error.message);
            return [];
        });
    }

function calculateRegistrationTimeline(users) {
  const registrationTimeline = {};
  users.forEach((user) => {
    const registrationDate = new Date(user.creationTime);

    // Kiểm tra xem giá trị thời gian có hợp lệ hay không
    if (!isNaN(registrationDate.getTime())) {
      const formattedDate = registrationDate.toISOString().split('T')[0];
      registrationTimeline[formattedDate] = (registrationTimeline[formattedDate] || 0) + 1;
    }
  });
  return registrationTimeline;
}

function calculateLoginStatistics(users) {
    const loginStatistics = {};

    users.forEach((user) => {
        if (user.loginTime) {
            const loginDate = new Date(user.loginTime);
            const formattedDate = loginDate.toISOString().split('T')[0];

            loginStatistics[formattedDate] = (loginStatistics[formattedDate] || 0) + 1;
        }
    });

    return loginStatistics;
}

function displayRegistrationTimelineChart(registrationTimeline) {
  const labels = Object.keys(registrationTimeline);
  const data = Object.values(registrationTimeline);

  const ctx = document.getElementById('registrationTimelineChart').getContext('2d');

  const registrationTimelineChart = new Chart(ctx, {
    type: 'bar', // Chuyển đổi thành biểu đồ cột
    data: {
      labels: labels,
      datasets: [{
        label: 'Số lượng người dùng đăng ký',
        data: data,
        backgroundColor: 'rgb(75, 192, 192)',
        borderWidth: 2,
      }],
    },
    options: {
      scales: {
        x: {
          type: 'time',
          time: {
            unit: 'day',
          },
        },
        y: {
          beginAtZero: true,
        },
      },
    },
  });
}

function displayLoginStatisticsChart(loginStatistics) {
  const labels = Object.keys(loginStatistics);
  const data = Object.values(loginStatistics);

  const ctx = document.getElementById('loginStatisticsChart').getContext('2d');

  const loginStatisticsChart = new Chart(ctx, {
    type: 'bar', // Chuyển đổi thành biểu đồ cột
    data: {
      labels: labels,
      datasets: [{
        label: 'Số lần đăng nhập',
        data: data,
        backgroundColor: 'rgb(75, 192, 192)',
        borderWidth: 2,
      }],
    },
    options: {
      scales: {
        x: {
          type: 'time',
          time: {
            unit: 'day',
          },
        },
        y: {
          beginAtZero: true,
        },
      },
    },
  });
}


function calculateMonthlyStatistics(users, actionType) {
        const monthlyStatistics = {};
        users.forEach((user) => {
            const actionTime = user[actionType + 'Time'];
            if (actionTime) {
                const date = new Date(actionTime);
                const monthKey = `${date.getFullYear()}-${date.getMonth() + 1}`;

                monthlyStatistics[monthKey] = (monthlyStatistics[monthKey] || 0) + 1;
            }
        });
        return monthlyStatistics;
}



 function displayMonthlyChart(chartId, data, chartTitle) {
        const labels = Object.keys(data);
        const values = Object.values(data);
        const ctx = document.getElementById(chartId).getContext('2d');
        new Chart(ctx, {
            type: 'bar',
            data: {
                labels: labels,
                datasets: [{
                    label: chartTitle,
                    data: values,
                    backgroundColor: 'rgb(75, 192, 192)',
                    borderWidth: 2,
                    barPercentage: 0.8,
                }],
            },
            options: {
                scales: {
                    x: {
                        type: 'time',
                        time: {
                            unit: 'month',
                        },
                    },
                    y: {
                        beginAtZero: true,
                    },
                },
            },
        });
    }

function calculateLoginStatistics1(users) {
    const loginStatistics = {};

    users.forEach((user) => {
        if (user.loginTime) {
            const loginDate = new Date(user.loginTime);
            const formattedDate = loginDate.toISOString().split('T')[0];

            loginStatistics[formattedDate] = (loginStatistics[formattedDate] || 0) + 1;
        }
    });

    return loginStatistics;
}
    
// Hàm hiển thị biểu đồ thống kê đăng nhập theo tháng
function displayMonthlyLoginChart(loginStatistics) {
    const labels = Object.keys(loginStatistics);
    const data = Object.values(loginStatistics);

    const ctx = document.getElementById('monthlyLoginChart').getContext('2d');

    const monthlyLoginChart = new Chart(ctx, {
        type: 'bar',
        data: {
            labels: labels,
            datasets: [{
                label: 'Số lần đăng nhập',
                data: data,
                backgroundColor: 'rgb(75, 192, 192)',
                borderWidth: 2,
            }],
        },
        options: {
            scales: {
                x: {
                    type: 'category',
                },
                y: {
                    beginAtZero: true,
                },
            },
        },
    });
}

function calculateYearlyStatistics(users) {
    const yearlyStatistics = {
        registrations: {},
        logins: {}
    };

    users.forEach((user) => {
        if (user.creationTime) {
            const registrationDate = new Date(user.creationTime);
            const registrationYear = registrationDate.getFullYear();
            yearlyStatistics.registrations[registrationYear] = (yearlyStatistics.registrations[registrationYear] || 0) + 1;
        }

        if (user.loginTime) {
            const loginDate = new Date(user.loginTime);
            const loginYear = loginDate.getFullYear();
            yearlyStatistics.logins[loginYear] = (yearlyStatistics.logins[loginYear] || 0) + 1;
        }
    });

    return yearlyStatistics;
}
// Hàm hiển thị biểu đồ cột cho thống kê đăng ký theo năm
function displayYearlyRegistrationChart(registrationStatistics) {
    const labels = Object.keys(registrationStatistics);
    const data = Object.values(registrationStatistics);

    const ctx = document.getElementById('YearlySubscriptionChart').getContext('2d');

    const yearlyRegistrationChart = new Chart(ctx, {
        type: 'bar',
        data: {
            labels: labels,
            datasets: [{
                label: 'Số lượng đăng ký',
                data: data,
                backgroundColor: 'rgb(75, 192, 192)',
                borderWidth: 2,
            }],
        },
        options: {
            scales: {
                x: {
                    type: 'category',
                },
                y: {
                    beginAtZero: true,
                },
            },
        },
    });
}

// Hàm hiển thị biểu đồ cột cho thống kê đăng nhập theo năm
function displayYearlyLoginChart(loginStatistics) {
    const labels = Object.keys(loginStatistics);
    const data = Object.values(loginStatistics);

    const ctx = document.getElementById('YearlyLoginChart').getContext('2d');

    const yearlyLoginChart = new Chart(ctx, {
        type: 'bar',
        data: {
            labels: labels,
            datasets: [{
                label: 'Số lần đăng nhập',
                data: data,
                backgroundColor: 'rgb(75, 192, 192)',
                borderWidth: 2,
            }],
        },
        options: {
            scales: {
                x: {
                    type: 'category',
                },
                y: {
                    beginAtZero: true,
                },
            },
        },
    });
}

function displayTotalUsers(total) {
    const totalUsersElement = document.getElementById("totalUsers");
    totalUsersElement.textContent = `Tổng Số Người Dùng: ${total}`;
    console.log(totalUsersElement.textContent);
}
function getTotalUsers() {
    // Your implementation to fetch total users, possibly using Firebase
    return database.ref('users').once('value').then(snapshot => snapshot.numChildren());
}

   window.onload = function () {
        getAllUsers().then((users) => {
            totalUsers = users.length;
            const registrationTimeline = calculateRegistrationTimeline(users);
            displayRegistrationTimelineChart(registrationTimeline);
            // Tính toán thống kê và hiển thị biểu đồ tròn
            const statistics = calculateStatistics(users);
            displayPieChart(statistics);
            const loginStatistics = calculateLoginStatistics(users);
            displayLoginStatisticsChart(loginStatistics);

              const monthlySubscriptionData = calculateMonthlyStatistics(users, 'creation');
            displayMonthlyChart('monthlySubscriptionChart', monthlySubscriptionData, 'Đăng Ký');

           const loginStatistics1 = calculateLoginStatistics1(users);
           displayMonthlyLoginChart(loginStatistics1);

             const yearlyStatistics = calculateYearlyStatistics(users);
    displayYearlyRegistrationChart(yearlyStatistics.registrations);
    displayYearlyLoginChart(yearlyStatistics.logins);
        }); // Gọi hàm lấy tổng số người dùng và hiển thị lên trang web
    getTotalUsers().then(displayTotalUsers);
    };
  </script>

</body>
</html>
