<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Quản lý âm nhạc</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css">
    <!-- Thêm CSS để hiển thị danh sách bài hát -->
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        .img-music{
          width: 300px;
          height: 200px;
        }

        .navbar-brand {
            padding: 5px;
            font-weight: bold;
            font-size: 30px;
        }

        .navbar-brand:hover {
            font-weight: bold;
            font-size: 30px;
        }

        .navbar {
            height: 82px;
            background-color: #1e88e5;
        }

        #searchButton {
            background-color: greenyellow;
        }

        /* Thêm kiểu cho phần tử hiển thị danh sách bài hát */
        #songList {
            display: flex;
            flex-wrap: wrap;
            justify-content: space-around;
            margin-top: 20px;
        }

        .songItem {
            text-align: center;
            margin-bottom: 20px;
        }
        /* Thêm kiểu cho thanh điều khiển */
        #controls {
            display: flex;
            align-items: center;
            justify-content: center;
            margin-top: 20px;
        }

        .control-btn {
            margin: 0 10px;
            cursor: pointer;
        }

        #volume {
            width: 100px;
            margin: 0 10px;
        }

        #speed {
            width: 100px;
            margin: 0 10px;
        }
#songDetails {
    display: flex;
    justify-content: space-between;
    align-items: center;
}
#songDetails > div {
    flex: 1;
}
#songImage {
    padding: 20px;
    width: 300px;
    height: 300px;
    margin-bottom: 20px;
}

#songDetails h3,
#songDetails p,
#songDetails button,
#songDetails input {
    color: white;
    margin-bottom: 10px;
}
.box-button{
    display: flex;
  
}
.btn-nut{
    border: 0px;
    background: #1e88e5;
    width: 100px;
    margin: 10px;
    border-radius: 20px;
}
.btn-nut:hover{
border: 0px;
background: yellow;
width: 100px;
margin: 10px;
border-radius: 20px;
}

.circular {
    border-radius: 100%;
    overflow: hidden;
    margin-bottom: 20px;
    transition: transform 2s linear; /* Thêm hiệu ứng chuyển động */
}

.playing.circular {
    transform: rotate(360deg); /* Áp dụng hiệu ứng xoay khi có class "playing" */
}

    /* Thêm class "rotating" để áp dụng hiệu ứng xoay */
.rotating {
    animation: rotate 20s linear infinite; /* Áp dụng hiệu ứng xoay trong 2 giây */
}

@keyframes rotate {
    from {
        transform: rotate(0deg);
    }
    to {
        transform: rotate(360deg);
    }
}

#songProgressBarContainer {
    width: 100%;
    display: flex;
    align-items: center;
}

#songProgress {
    flex: 1;
    margin-right: 10px; /* vĐể tạo khoảng trắng giữa thanh tiến trình à thanh trượt */
    
}
#seekSlider {
    width: 160px;
    height: 10px;
    position: absolute;
    top: 175px;
    left: 571px;
    appearance: none;
    opacity: 0.7;
}
#seekSlider::-webkit-slider-thumb {
    -webkit-appearance: none;
    appearance: none;
    width: 20px;
    height: 20px;
    cursor: pointer;
} 
.box-title{
    display: inline;
    margin-left: 20px;
}
#songDetails {
    display: flex;
    justify-content: space-between;
    align-items: flex-start;
}

#songInfo {
    flex: 1;
    margin-right: 20px;
}

#songListContainer {
    flex: 1;
    width: 50%; /* Đặt chiều rộng của #songListContainer là 50% */
    box-sizing: border-box; /* Đảm bảo rằng padding và border không làm tăng kích thước */
    padding: 20px; /* Thêm padding nếu cần thiết */
}

#songList {
    list-style: none;
    padding: 0;
    margin: 0;
}

#songList li {
    margin-bottom: 10px;
}

/* CSS để làm đẹp danh sách bài hát */
.songItem {
    padding-top: 20px;
  width: 150px;
  height: 200px;
  border: 1px solid black;
  padding: 10px;
  border-radius: 20px;
  margin-bottom: 10px;
  background-color: black;
  cursor: pointer;
  transition: background-color 0.3s ease;
}

.songItem:hover {
  background-color: #f0f0f0;
}

.songTitle {
    font-size: 15px;
    color: white;
  margin-bottom: 5px;
}

.songArtist {
  color: white;
  font-size: 14px;
}
/* CSS để làm đẹp hình ảnh trong danh sách bài hát */
.songImage {
  width: 100px; /* Điều chỉnh kích thước hình ảnh theo ý muốn */
  height: 100px;
  margin-right: 10px;
  border-radius: 5px;
}
.songTitle{
    font-size: 15px;
}
.pagination {
  display: flex;
  justify-content: center;
  margin-top: 20px;
}

.pagination-button {
  margin: 0 5px;
  padding: 10px 15px;
  font-size: 16px;
  background-color: #333;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  border: 1px solid black;
}
 body{
        background-color: #333;
      }
.pagination-button:hover {
  background-color: #1e88e5;
}

.pagination-button.active {
  background-color: #4caf50;
  color: white;
}
#currentTime{
    color: white;
}
#totalDuration{
    color: white;
}
</style>
</head>
<body>
    <nav class="navbar navbar-expand-lg bg-body-tertiary">
        <div class="container-fluid">
            <a class="navbar-brand" href="./home">Trang Chủ</a>
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarSupportedContent"
                aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarSupportedContent">
                <div class="container-fluid">
                    <form style="width: 300px; position: absolute; right: 10px; top: 20px;" class="d-flex" role="search">
                        <input class="form-control me-2" type="search" id="searchInput" placeholder="Tìm kiếm bài hát"
                            aria-label="Search">
                        <button id="searchButton" class="btn btn-outline-success" type="button">Search</button>
                    </form>
                </div>
            </div>
        </div>
    </nav>

 <div id="songDetails">
    <img id="songImage" class="circular" src="" alt="">
    
    <div class="box-title">
  <div>
    <h3 style="margin-top: 10px;" id="songTitle"></h3>
    <p id="songArtist"></p>
    <progress id="songProgress" value="0" max="100"></progress>
  <span id="currentTime">0:00</span> / <span id="totalDuration">0:00</span>  
  <input type="range" id="seekSlider" min="0" max="100" step="0.1" value="0" oninput="seekSong()">
    </div>
    
    <p id="songAuthor"></p>
    <p id="songGenre"></p>
 <!-- Các nút điều khiển -->

 <div class="box-button">
<button style="margin-bottom: 20px;" class="btn-nut" id="pauseButton" onclick="pause()">Tạm dừng</button>
 </div>
  <span style="margin-top:20px ;color:white; border: 1px solid white; border-radius: 20px;padding: 5px;">Âm Lượng:
 <span style="font-size: 30px; color: white;">+</span>  <input type="range" id="volume" min="0" max="1" step="0.01" value="1" oninput="changeVolume()"> <span style="font-size: 30px; color: white;">-</span> 
 </span>
 <br />
 <span style="color: white; border: 1px solid white; border-radius: 20px;padding: 5px;">Tốc độ:
<span style="font-size: 30px; color: white;margin-left: 30px;">+</span> <input type="range" id="speed" min="0.5" max="2" step="0.1" value="1" oninput="changeSpeed()"><span style="font-size: 30px; color: white;">-</span> 
 </span>
    </div>


    <div id="songListContainer">
        <h3>Danh Sách Bài Hát</h3>
        <ul id="songList">
            <!-- Các mục danh sách bài hát sẽ được thêm vào đây bằng JavaScript -->
        </ul>
        <ul class="pagination" id="pagination"></ul>
    </div>
  
 </div>
   

  <script src="https://cdnjs.cloudflare.com/ajax/libs/howler/2.2.3/howler.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.6/dist/umd/popper.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.min.js"></script>
    <!-- Firebase JavaScript SDK -->
    <script src="https://www.gstatic.com/firebasejs/8.8.0/firebase-app.js"></script>
    <script src="https://www.gstatic.com/firebasejs/8.8.0/firebase-database.js"></script>
<script>

 const firebaseConfig = {
            apiKey: "AIzaSyCZgZP878mOAM2ec-hz1WFwORxSw_J6d2k",
            authDomain: "soundbox-du-an-md31.firebaseapp.com",
            databaseURL: "https://soundbox-du-an-md31-default-rtdb.firebaseio.com",
            projectId: "soundbox-du-an-md31",
            storageBucket: "soundbox-du-an-md31.appspot.com",
            messagingSenderId: "265264289877",
            appId: "1:265264289877:web:0f88e2fa54c638685e9cdc",
            measurementId: "G-FE9Z9NKJDR"
        };
      firebase.initializeApp(firebaseConfig);
        const database = firebase.database();
        const songsRef = database.ref("songs");

const songProgress = document.getElementById('songProgress');
const currentTime = document.getElementById('currentTime');
const totalDuration = document.getElementById('totalDuration');
// JavaScript
const seekSlider = document.getElementById('seekSlider');

// Định nghĩa biến toàn cục
let currentSong;
let songList;
let currentSongIndex;

// Lấy tham số từ URL để biết songId
const urlParams = new URLSearchParams(window.location.search);
const songId = urlParams.get('songId');
// Khởi tạo biến sound ở phạm vi toàn cục
let sound;
// Lấy thông tin bài hát từ Firebase hoặc nơi bạn lưu trữ dữ liệu
const songRef = database.ref(`songs/${songId}`);
songRef.once('value').then(snapshot => {
    const song = snapshot.val();
    // Hiển thị thông tin về bài hát trên trang play music
    document.getElementById('songImage').src = song.image;
    document.getElementById('songTitle').innerText = song.title;
    document.getElementById('songArtist').innerText =song.artist;
    document.getElementById('songAuthor').innerText = `Tác Giả: ${song.author}`;
    document.getElementById('songGenre').innerText = `Thể Loại: ${song.genre}`;
      // Sử dụng Howler.js để phát âm thanh
        sound = new Howl({
            src: [song.url],
            format: ['mp3'], // Định dạng âm thanh
            autoplay: true // Tự động phát âm thanh khi tạo đối tượng Howl
        });
        
// Lắng nghe sự kiện khi bài hát được load hoàn tất

sound.on('play', () => {
    // Cập nhật thời gian tổng cộng của bài hát
    const durationInSeconds = Math.floor(sound.duration());
    const minutes = Math.floor(durationInSeconds / 60);
    const seconds = durationInSeconds % 60;
    totalDuration.innerText = `${minutes}:${seconds < 10 ? '0' : ''}${seconds}`;
    // Bắt đầu cập nhật thanh thời gian
    updateProgressBar();
});
// Thêm sự kiện lắng nghe khi thời gian bài hát thay đổi
sound.on('seek', () => {
    updateProgressBar();
});
        // Bắt sự kiện khi người dùng điều chỉnh thanh trượt
    seekSlider.addEventListener('input', () => {
    // Tính toán thời gian mới dựa trên giá trị của thanh trượt
    const seekTime = (seekSlider.value / 100) * sound.duration();
    // Seek đến thời gian mới
    sound.seek(seekTime);
    // Cập nhật thanh thời gian và thời gian hiện tại
    updateProgressBar();
});
}).catch(error => {
    console.error('Lỗi khi lấy thông tin bài hát:', error);
});
// Hàm cập nhật thanh thời gian và thời gian hiện tại
function updateProgressBar() {
    const progress = (sound.seek() / sound.duration()) * 100;
    songProgress.value = progress;
    const currentTimeInSeconds = Math.floor(sound.seek());
    const minutes = Math.floor(currentTimeInSeconds / 60);
    const seconds = currentTimeInSeconds % 60;
    currentTime.innerText = `${minutes}:${seconds < 10 ? '0' : ''}${seconds}`;
}
// Bắt đầu cập nhật thanh thời gian mỗi giây
setInterval(updateProgressBar, 1000);
// Thêm hàm pause vào phần JavaScript của trang play music
function pause() {
    // Kiểm tra xem âm thanh đang phát hay không
    if (sound) {
        if (sound.playing()) {
            // Nếu âm thanh đang phát, tạm dừng nó
            sound.pause();
            document.getElementById('pauseButton').innerText = 'Tiếp tục'; // Update button text
            // Xóa class "rotating" khi kết thúc phát âm thanh
            document.getElementById('songImage').classList.remove('rotating');
        } else {
            // Nếu âm thanh đã tạm dừng, tiếp tục phát
            sound.play();
            document.getElementById('pauseButton').innerText = 'Tạm dừng'; // Update button text
               // Thêm class "rotating" khi bắt đầu phát âm thanh
           document.getElementById('songImage').classList.add('rotating');
        }
    }
}

const songsPerPage = 6; // Số lượng bài hát mỗi trang
let currentPage = 1; // Trang hiện tại

// Lấy danh sách bài hát từ Firebase
songsRef.once('value').then(snapshot => {
  const songsData = snapshot.val();

  // Hiển thị bài hát cho trang đầu tiên
  displaySongs(1, songsPerPage, songsData);

  // Thêm nút phân trang
 // Thêm nút phân trang
const totalPages = Math.ceil(Object.keys(songsData).length / songsPerPage);
for (let i = 1; i <= totalPages; i++) {
  const pageButton = document.createElement('button');
  pageButton.textContent = i;
  pageButton.classList.add('pagination-button'); // Thêm lớp CSS cho nút phân trang
  pageButton.addEventListener('click', () => {
    currentPage = i;
    const startIndex = (currentPage - 1) * songsPerPage + 1;
    const endIndex = Math.min(currentPage * songsPerPage, Object.keys(songsData).length);
    displaySongs(startIndex, endIndex, songsData);
  });
  document.getElementById('pagination').appendChild(pageButton);
}
}).catch(error => {
  console.error('Lỗi khi lấy danh sách bài hát:', error);
});

function displaySongs(startIndex, endIndex, songsData) {
  // Xóa các mục danh sách hiện tại
  document.getElementById('songList').innerHTML = '';

  // Lặp qua mảng các bài hát và thêm chúng vào danh sách
  let count = 0;
  for (const key in songsData) {
    if (Object.hasOwnProperty.call(songsData, key)) {
      count++;

      // Kiểm tra xem bài hát có nằm trong khoảng trang hiện tại không
      if (count >= startIndex && count <= endIndex) {
        const song = songsData[key];

        // Tạo một phần tử danh sách mới
        const listItem = document.createElement('li');
        listItem.classList.add('songItem');

        // Tạo phần tử hình ảnh
        const imageElement = document.createElement('img');
        imageElement.src = song.image;
        imageElement.alt = `${song.title} - ${song.artist}`;
        imageElement.classList.add('songImage');

        // Tạo các phần tử HTML cho thông tin của bài hát
        const titleElement = document.createElement('div');
        titleElement.textContent = song.title;
        titleElement.classList.add('songTitle');

        const artistElement = document.createElement('div');
        artistElement.textContent = song.artist;
        artistElement.classList.add('songArtist');

        // Thêm sự kiện click để chọn bài hát mới
        listItem.addEventListener('click', () => {
          window.location.href = `./play-music?songId=${key}`;
        });

        // Thêm các phần tử vào mục danh sách
        listItem.appendChild(imageElement);
        listItem.appendChild(titleElement);
        listItem.appendChild(artistElement);
        document.getElementById('songList').appendChild(listItem);
      }
    }
  }
}

    // Hàm xử lý khi người dùng thay đổi giá trị âm lượng
    function changeVolume() {
        const volumeValue = document.getElementById('volume').value;
        console.log('Volume:', volumeValue);

        // Thực hiện các thao tác khác tùy thuộc vào giá trị âm lượng
          // Thực hiện các thao tác khác tùy thuộc vào giá trị âm lượng
    // Ví dụ: cập nhật âm lượng của đối tượng âm thanh (đã đặt tên là sound)
     if (sound) {
        const volume = parseFloat(volumeValue);
        sound.volume(volume);
        }
    }

    // Hàm xử lý khi người dùng thay đổi giá trị tốc độ
    function changeSpeed() {
        const speedValue = document.getElementById('speed').value;
        console.log('Speed:', speedValue);

        // Thực hiện các thao tác khác tùy thuộc vào giá trị tốc độ
         // Thực hiện các thao tác khác tùy thuộc vào giá trị tốc độ
    // Ví dụ: cập nhật tốc độ của đối tượng âm thanh (đã đặt tên là sound)
    if (sound) {
        const speed = parseFloat(speedValue);
        sound.rate(speed);
    }
    }

</script>
</body>

</html>
