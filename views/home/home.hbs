<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Quản lý âm nhạc</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css">
    <!-- Thêm CSS để hiển thị danh sách bài hát -->
    <style>
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}
body{
background-color: #333;
}
.img-music{
border-radius: 30px;
width: 100px;
height: 100px;
}
.navbar-brand {
  padding: 5px;
  border-radius: 10px;
  font-weight: bold;
  font-size: 30px;
}

.navbar {
  height: 82px;
  background-color: #1e88e5;
}

#searchButton {
  background-color: greenyellow;
}

/* Thêm kiểu cho phần tử hiển thị danh sách bài hát */
#songList {
  display: flex;
  flex-wrap: wrap;
  justify-content: space-around;
  margin-top: 20px;
}

.songItem {
  text-align: center;
  margin-bottom: 20px;
}
/* Thêm kiểu cho thanh điều khiển */
#controls {
  display: flex;
  align-items: center;
  justify-content: center;
  margin-top: 20px;
}

.control-btn {
  margin: 0 10px;
  cursor: pointer;
}

#volume {
  width: 100px;
  margin: 0 10px;
}

#speed {
  width: 100px;
  margin: 0 10px;
}
.btn-next-play{
  width: 150px;
  height: 40px;
  border: 0px;
  border-radius: 20px;
  background-color: tomato;
  color: white;
}
.btn-next-play:hover{
  width: 150px;
  height: 40px;
  border: 0px;
  border-radius: 20px;
  background-color: #1e88e5;
  color: white;
}
.songItem{
  margin: 10px;
  border-radius: 20px;
  background-color: black;
    padding: 20px;
  height: 300px;
  width: 250px;
}

  .txt-title{
     color: white;
     font-size: 20px;
    font-weight: bold;
  }
  .txt-artist{
    color: white;
    font-size: 15px;
  }
        .pagination {
  display: flex;
  justify-content: center;
  align-items: center;
  margin-top: 20px;
}

.pagination-button {
  padding: 8px 12px;
  margin: 0 4px;
  border: 1px solid #ccc;
  background-color: #fff;
  color: #333;
  cursor: pointer;
  transition: background-color 0.3s, color 0.3s;
}

.pagination-button:hover {
  background-color: #333;
  color: #fff;
}

.pagination-button.active {
  background-color: #333;
  color: #fff;
}

.pagination-button:disabled {
  opacity: 0.5;
  cursor: not-allowed;
}

.box-filter {
  margin-left: 20px;
    display: flex;
    align-items: center;
}

label {
   width: 100px;
   height: 30px;
}

select {
    padding: 8px;
    border: 1px solid #ccc;
    border-radius: 4px;
}

/* Tuỳ chỉnh màu sắc của option khi được hover hoặc chọn */
select:hover,
select:focus {
    border-color: #4caf50; /* Màu xanh lá cây khi di chuột vào */
}

/* Định dạng màu nền và màu chữ của option khi được hover */
select option:hover {
    background-color: #4caf50;
    color: #fff;
}

/* Định dạng màu nền và màu chữ của option khi được chọn */
select option:checked {
    background-color: #4caf50;
    color: #fff;
}

/* Định dạng button */
button {
    padding: 10px 15px;
    background-color: #4caf50;
    color: #fff;
    border: none;
    border-radius: 4px;
    cursor: pointer;
}

button:hover {
    background-color: #45a049;
}
.box-loc{
  position: absolute;
  top: 20px;
  left: 200px;
  width: 650px;
  height: 40px;
  display: flex;
}
    </style>
</head>

<body>
    <nav class="navbar navbar-expand-lg bg-body-tertiary">
        <div class="container-fluid">
            <a class="navbar-brand" href="./home">Trang Chủ</a>
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarSupportedContent"
                aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>

              <div class="nav-menu">
     <div>

<div class="box-loc">
<label style="margin-top: 10px; font-weight: bold;" for="startDate">Bắt đầu:</label>
<input type="date" id="startDate">
<label style="margin-top: 10px; margin-left: 10px; font-weight: bold;" for="endDate">Kết thúc:</label>
<input   type="date" id="endDate">
<button style="margin-left: 10px;" onclick="filterByDate()">Lọc</button>
<div class="box-filter">
    <select id="filterLatest" onchange="applyFilterLoc()">
      <option value="">-- Lọc Theo --</option>
      <option value="Filter-a-z">Ký Tự A-Z</option>
      <option value="Filter-z-a">Ký Tự Z-A</option>
      <option value="count-up">Lượt Nghe ↑</option>
      <option value="count-down">Lượt Nghe ↓</option>
    </select>
</div>
</div>
    <div class="collapse navbar-collapse" id="navbarSupportedContent">
        <div class="container-fluid">
            <form style="width: 300px; position: absolute; right: 10px; top: 20px;" class="d-flex" role="search">
                <input class="form-control me-2" type="search" id="searchInput" placeholder="Tìm kiếm bài hát"
                    aria-label="Search">
                <button id="searchButton" class="btn btn-outline-success" type="button">Search</button>
            </form>
        </div>
    </div>
    </div>
</nav>

    <!-- Giao diện hiển thị danh sách bài hát đang phát -->
    <div id="nowPlaying">
        <h2><span id="currentSongTitle"></span></h2>
    </div>

    <!-- Thêm phần tử để hiển thị danh sách bài hát -->
    <div id="songList"></div>

 <ul class="pagination" id="pagination"></ul>

    <!-- Thêm thư viện Howler.js -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/howler/2.2.3/howler.js"></script>


    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.6/dist/umd/popper.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.min.js"></script>
    <!-- Firebase JavaScript SDK -->
    <script src="https://www.gstatic.com/firebasejs/8.8.0/firebase-app.js"></script>
    <script src="https://www.gstatic.com/firebasejs/8.8.0/firebase-database.js"></script>
 <script>
  const firebaseConfig = {
    apiKey: "AIzaSyCZgZP878mOAM2ec-hz1WFwORxSw_J6d2k",
    authDomain: "soundbox-du-an-md31.firebaseapp.com",
    databaseURL: "https://soundbox-du-an-md31-default-rtdb.firebaseio.com",
    projectId: "soundbox-du-an-md31",
    storageBucket: "soundbox-du-an-md31.appspot.com",
    messagingSenderId: "265264289877",
    appId: "1:265264289877:web:0f88e2fa54c638685e9cdc",
    measurementId: "G-FE9Z9NKJDR"
  };

  firebase.initializeApp(firebaseConfig);
const database = firebase.database();
const songsRef = database.ref("songs");

const songsPerPage = 8;
let currentPage = 1;

// Function to get all songs from Firebase
function getAllSongs() {
    return songsRef.once("value").then((snapshot) => {
        const allSongs = [];

        snapshot.forEach((childSnapshot) => {
            const songData = childSnapshot.val();
            songData.key = childSnapshot.key;
            allSongs.push(songData);
        });

        return allSongs;
    }).catch((error) => {
        console.error("Error getting data from Firebase: " + error.message);
        return [];
    });
}
const startDateInput = document.getElementById("startDate");
const endDateInput = document.getElementById("endDate");
// Thêm hàm lọc dựa trên ngày
function filterByDate() {
    // Lấy giá trị ngày bắt đầu và ngày kết thúc từ các trường input
        const startDate = startDateInput.value;
        const endDate = endDateInput.value;
           // Kiểm tra xem ngày bắt đầu và kết thúc có giá trị không
        if (!startDate || !endDate) {
            alert("Vui lòng nhập cả ngày bắt đầu và ngày kết thúc.");
            return;
        }
          // Chuyển đổi chuỗi ngày thành đối tượng Date
        const startTimestamp = new Date(startDate).toISOString();
        const endTimestamp = new Date(endDate).toISOString();
   // Lọc dữ liệu theo khoảng thời gian từ Firebase
        songsRef.orderByChild("timestamp")
            .startAt(startTimestamp)
            .endAt(endTimestamp)
            .once("value")
            .then((snapshot) => {
                const filteredSongs = [];
                snapshot.forEach((childSnapshot) => {
                    const songData = childSnapshot.val();
                    songData.key = childSnapshot.key;
                    filteredSongs.push(songData);
                });

               displaySongs(0, filteredSongs.length - 1, filteredSongs);
               
            })
            .catch((error) => {
                console.error("Lỗi khi lọc dữ liệu từ Firebase: " + error.message);
            });
    }

function applyFilterLoc() {
    const filterSelect = document.getElementById('filterLatest');
    const selectedValue = filterSelect.value;

    getAllSongs().then((songs) => {
        let filteredSongs = [];

        switch (selectedValue) {
            case 'Filter-a-z':
                filteredSongs = songs.sort((a, b) => a.title.localeCompare(b.title));
                console.log(filteredSongs);
                break;
            case 'Filter-z-a':
                filteredSongs = songs.sort((a, b) => b.title.localeCompare(a.title));
                console.log(filteredSongs);
                break;
            case 'count-up':
                filteredSongs = songs.sort((a, b) => a.count - b.count);
                console.log(filteredSongs);
                break;
            case 'count-down':
                filteredSongs = songs.sort((a, b) => b.count - a.count);
                console.log(filteredSongs);
                break;
            default:
                // No filter selected, use the original order
                filteredSongs = songs;
                break;
        }

        displaySongs(0, filteredSongs.length - 1, filteredSongs);
    });
}

function displaySongs(startIndex, endIndex, songs) {
  const songListElement = document.getElementById('songList');
  songListElement.innerHTML = '';

  // Lấy danh sách keys từ đối tượng Firebase
  const songKeys = Object.keys(songs);

  for (let i = startIndex; i <= endIndex && i < songKeys.length; i++) {
    const songKey = songKeys[i];
    const song = songs[songKey];

    if (song) {
      const songItem = document.createElement('div');
      songItem.classList.add('songItem');
      songItem.innerHTML = `
        <img class="img-music" src="${song.image || ''}" alt="${song.title || ''}">
        <div class="txt-title">${song.title  || ''}</div>
         <p class="txt-artist">Ca sĩ: ${song.artist || ''}</p>
         <p  class="txt-artist">Thể loại: ${song.genre || ''}</p>
        <button class="btn-next-play" onclick="playSong('${song.id}')">Nghe</button>
      `;
      songListElement.appendChild(songItem);
    } else {
      console.error(`Bản ghi bài hát không hợp lệ với key ${songKey}.`);
    }
  }
}


function loadSongs() {
  songsRef.once('value')
    .then(snapshot => {
      const songs = snapshot.val();

      if (songs) {
        const totalSongs = Object.keys(songs).length;
        const totalPages = Math.ceil(totalSongs / songsPerPage);
        const songArray = Object.values(songs);

        displaySongs(0, songsPerPage - 1, songArray);

        const paginationElement = document.getElementById('pagination');
        for (let i = 1; i <= totalPages; i++) {
          const pageButton = document.createElement('button');
          pageButton.textContent = i;
          pageButton.classList.add('pagination-button');
          if (i === currentPage) {
            pageButton.classList.add('active');
          }
          pageButton.addEventListener('click', () => {
            currentPage = i;
            const startIndex = (currentPage - 1) * songsPerPage;
            const endIndex = Math.min(currentPage * songsPerPage - 1, totalSongs - 1);
            displaySongs(startIndex, endIndex, songArray);

            const activeButton = paginationElement.querySelector('.pagination-button.active');
            activeButton.classList.remove('active');
            pageButton.classList.add('active');
          });
          paginationElement.appendChild(pageButton);
        }
      } else {
        console.error('Dữ liệu bài hát không hợp lệ.');
      }
    })
    .catch(error => {
      console.error('Lỗi khi lấy danh sách bài hát:', error);
    });
}



// Lắng nghe sự kiện khi nhấn nút tìm kiếm
const searchButton = document.getElementById('searchButton');
searchButton.addEventListener('click', () => {
  const searchInput = document.getElementById('searchInput');
  const keyword = searchInput.value.trim().toLowerCase();

  songsRef.once('value')
    .then(snapshot => {
      const songs = snapshot.val();

      if (songs) {
        const filteredSongs = Object.values(songs).filter(song => {
          const title = song.title.toLowerCase();
          const artist = song.artist.toLowerCase();
          return title.includes(keyword) || artist.includes(keyword);
        });
        displaySongs(0, songsPerPage - 1, filteredSongs);
      } else {
        console.error('Dữ liệu bài hát không hợp lệ.');
      }
    })
    .catch(error => {
      console.error('Lỗi khi tìm kiếm bài hát:', error);
    });
});

function applyFilter() {
  const filterValue = document.getElementById('filterCopyright').value;

  songsRef.once('value')
    .then(snapshot => {
      const songs = snapshot.val();

      if (songs) {
        const songArray = Object.values(songs);
        const filteredSongs = songArray.filter(song => {
          const isCopyrighted = song.copyrighted === "copyrighted";

          if (filterValue === 'all') {
            return true;
          } else if (filterValue === 'copyrighted') {
            return Boolean(song.copyrighted);
          } else {
            return !Boolean(song.copyrighted);
          }
        });
        displaySongs(0, songsPerPage - 1, filteredSongs);
      } else {
        console.error('Dữ liệu bài hát không hợp lệ.');
      }
    })
    .catch(error => {
      console.error('Lỗi khi lọc bài hát theo bản quyền:', error);
    });
}

function displayFilteredSongs(filteredSongs) {
  const songListElement = document.getElementById('songList');
  songListElement.innerHTML = '';

  for (let i = 0; i < filteredSongs.length; i++) {
    const song = filteredSongs[i];

    if (song) {
      const songItem = document.createElement('div');
      songItem.classList.add('songItem');
      songItem.innerHTML = `
        <img class="img-music" src="${song.image || ''}" alt="${song.title || ''}">
        <div class="txt-title">${song.title || ''}</div>
        <p>${song.artist || ''}</p>
        <button class="btn-next-play" onclick="playSong('${i}')">Nghe</button>
      `;
      songListElement.appendChild(songItem);
    } else {
      console.error(`Bản ghi bài hát không hợp lệ tại vị trí ${i}.`);
    }
  }
}

 // Kiểm tra trạng thái đăng nhập trước khi hiển thị dữ liệu
function checkLoginStatus() {
     // Lấy reference đến đối tượng admin trong Realtime Database
    const adminRef = firebase.database().ref('users').child("0Syobn6farX70IvRip7uOM1ttt03");

    adminRef.once('value')
        .then(snapshot => {
            const adminData = snapshot.val();

            if (adminData && adminData.loggedIn) {
                // Trạng thái loggedIn là true, hiển thị dữ liệu
               // Load danh sách bài hát ban đầu
              loadSongs();

            } else {
                // Trạng thái loggedIn là false hoặc không tìm thấy thông tin admin
                alert('Vui lòng đăng nhập để xem dữ liệu.');
                window.location.href = '/'; // Chuyển hướng đến trang đăng nhập
            }
        })
        .catch(error => {
            console.error('Lỗi khi kiểm tra trạng thái loggedIn:', error.message);
            alert('Có lỗi xảy ra khi kiểm tra trạng thái loggedIn.');
        });
}


function playSong(songId) {
  // Chuyển hướng sang trang play-music với tham số songId
  window.location.href = `/play-music?songId=${songId}`;
}
// Sự kiện khi trang web được tải
window.onload = function () {
    // Kiểm tra trạng thái đăng nhập khi trang web được tải
    checkLoginStatus();
    
};


</script>

</body>
</html>
