


//user static
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.6/dist/umd/popper.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.min.js"></script>
<!-- Firebase JavaScript SDK -->
  <script src="https://www.gstatic.com/firebasejs/8.8.0/firebase-app.js"></script>
  <script src="https://www.gstatic.com/firebasejs/8.8.0/firebase-database.js"></script>
   <script src="https://cdn.jsdelivr.net/npm/@emailjs/browser@3/dist/email.min.js"></script>
<script>
   const firebaseConfig = {
    apiKey: "AIzaSyCZgZP878mOAM2ec-hz1WFwORxSw_J6d2k",
    authDomain: "soundbox-du-an-md31.firebaseapp.com",
    databaseURL: "https://soundbox-du-an-md31-default-rtdb.firebaseio.com",
    projectId: "soundbox-du-an-md31",
    storageBucket: "soundbox-du-an-md31.appspot.com",
    messagingSenderId: "265264289877",
    appId: "1:265264289877:web:0f88e2fa54c638685e9cdc",
    measurementId: "G-FE9Z9NKJDR"
};

firebase.initializeApp(firebaseConfig);

const database = firebase.database();
const feedbackRef = database.ref("feedback");

let allFeedbacks = [];
const feedbackTable = document.getElementById('feedbackTable');
const pagination = document.getElementById('pagination');
const itemsPerPage = 5;
let currentPage = 1;

const replyModal = new bootstrap.Modal(document.getElementById('replyModal'));
const replyForm = document.getElementById('replyForm');
function getAllFeedback() {
    return feedbackRef.once("value")
        .then((snapshot) => {
            const feedbackData = snapshot.val() || {};
            const feedbackArray = Object.keys(feedbackData).map(key => ({
                key: key,
                ...feedbackData[key]
            }));
            return feedbackArray;
        })
        .catch((error) => {
            console.error("Error fetching feedback data:", error.message);
            return [];  // Return an empty array in case of an error
        });
}
function filterByDate() {
    const startDate = new Date(document.getElementById('startDate').value);
    const endDate = new Date(document.getElementById('endDate').value);

    console.log("Start Date:", startDate);
    console.log("End Date:", endDate);

    getAllFeedback().then((feedbackData) => {
        if (feedbackData.length === 0) {
            console.log("No feedback data available.");
            return;
        }

        console.log("All Feedback Data:", feedbackData);

        const filteredFeedbacks = feedbackData.filter((feedback) => {
            const feedbackDate = new Date(feedback.timestamp);
            return feedbackDate >= startDate && feedbackDate <= endDate;
        });

        console.log("Filtered Feedbacks:", filteredFeedbacks);
        displayFeedback(filteredFeedbacks);
    });
}
function displayFeedback(feedbackData) {
    feedbackData.sort((a, b) => b.timestamp - a.timestamp);
    console.log("Feedback Data:", feedbackData);
    feedbackTable.innerHTML = "";
    const startAt = (currentPage - 1) * itemsPerPage;
    const feedbackOnCurrentPage = feedbackData.slice(startAt, startAt + itemsPerPage);

    feedbackOnCurrentPage.forEach((feedback, index) => {
        const row = feedbackTable.insertRow();
        const idCell = row.insertCell(0);
        const emailCell = row.insertCell(1);
        const usernameCell = row.insertCell(2);
        const phoneCell = row.insertCell(3);
        const commentCell = row.insertCell(4);
        const replyStatusCell = row.insertCell(5);
        const actionCell = row.insertCell(6);

        idCell.textContent = startAt + index + 1;
        emailCell.textContent = feedback.email || "";
        usernameCell.textContent = feedback.name || "";
        phoneCell.textContent = feedback.phone || "";
        commentCell.textContent = feedback.comment || "";

        if (feedback.reply) {
            replyStatusCell.textContent = "Đã trả lời";
            replyStatusCell.classList.add("text-success");
        } else {
            replyStatusCell.textContent = "Chưa trả lời";
            replyStatusCell.classList.add("text-warning");
        }

        const deleteButton = document.createElement("button");
        deleteButton.textContent = "Xóa";
        deleteButton.classList.add("btn", "btn-danger");
        deleteButton.addEventListener("click", () => {
            const feedbackKeyToDelete = feedback.key;
            const confirmDelete = confirm("Bạn có chắc chắn muốn xóa phản hồi này?");
            if (confirmDelete) {
                feedbackRef.child(feedbackKeyToDelete).remove()
                    .then(() => {
                        getAllFeedback().then(displayFeedback);
                        alert("Xóa Thành Công");
                    })
                    .catch((error) => {
                        console.error("Lỗi khi xóa phản hồi: " + error.message);
                    });
            }
        });
        actionCell.appendChild(deleteButton);

        const replyButton = document.createElement("button");
        if (feedback.reply) {
            replyButton.textContent = "Trả lời Lại";
            replyButton.classList.add("btn", "btn-warning");
            replyButton.addEventListener("click", () => {
                showReplyDialog(feedback);
            });
        } else {
            replyButton.textContent = "Trả lời";
            replyButton.classList.add("btn", "btn-primary");
            replyButton.addEventListener("click", () => {
                showReplyDialog(feedback);
            });
        }
        actionCell.appendChild(replyButton);
    });

    updatePaginationButtons(feedbackData.length);
}

function updatePaginationButtons(totalItems) {
    pagination.innerHTML = "";
    const totalPages = Math.ceil(totalItems / itemsPerPage);

    if (totalPages === 0) {
        console.log("Không có trang nào để hiển thị.");
        return;
    }

    const previousButton = document.createElement("li");
    previousButton.innerHTML = '<a href="#" aria-label="Previous">&laquo;</a>';
    previousButton.addEventListener("click", () => {
        if (currentPage > 1) {
            currentPage--;
            searchFeedback();
        }
    });
    pagination.appendChild(previousButton);

    const firstPageButton = document.createElement("li");
    firstPageButton.innerHTML = '<a href="#">1</a>';
    firstPageButton.addEventListener("click", () => {
        currentPage = 1;
        searchFeedback();
    });
    pagination.appendChild(firstPageButton);

    for (let i = Math.max(2, currentPage - 2); i <= Math.min(totalPages - 1, currentPage + 2); i++) {
        const pageItem = document.createElement("li");
        pageItem.innerHTML = `<a href="#">${i}</a>`;
        pageItem.addEventListener("click", () => {
            currentPage = i;
            searchFeedback();
        });
        pagination.appendChild(pageItem);
    }

    const lastPageButton = document.createElement("li");
    lastPageButton.innerHTML = `<a href="#">${totalPages}</a>`;
    lastPageButton.addEventListener("click", () => {
        currentPage = totalPages;
        searchFeedback();
    });
    pagination.appendChild(lastPageButton);

    const nextButton = document.createElement("li");
    nextButton.innerHTML = '<a href="#" aria-label="Next">&raquo;</a>';
    nextButton.addEventListener("click", () => {
        if (currentPage < totalPages) {
            currentPage++;
            searchFeedback();
        }
    });
    pagination.appendChild(nextButton);
}

function searchFeedback() {
    const searchKeyword = document.getElementById('searchInput').value.toLowerCase();

    getAllFeedback().then((feedbackData) => {
        const filteredFeedbacks = feedbackData.filter((feedback) => {
            return (
                feedback.email.toLowerCase().includes(searchKeyword) ||
                feedback.name.toLowerCase().includes(searchKeyword)
            );
        });
        displayFeedback(filteredFeedbacks);
    });
}

const searchForm = document.getElementById('searchForm');
searchForm.addEventListener('submit', (event) => {
    event.preventDefault();
    currentPage = 1;
    searchFeedback();
});

function applyFilters() {
    const statusFilter = document.getElementById('filterStatus').value;

    getAllFeedback().then((feedbackData) => {
        let filteredFeedbacks = [];
        if (statusFilter === 'all') {
            filteredFeedbacks = feedbackData;
        } else if (statusFilter === 'replied') {
            filteredFeedbacks = feedbackData.filter((feedback) => feedback.reply);
        } else if (statusFilter === 'unreplied') {
            filteredFeedbacks = feedbackData.filter((feedback) => !feedback.reply);
        }

        displayFeedback(filteredFeedbacks);
    });
}

function showReplyDialog(feedback) {
    replyModal.show();

    const closeButton = document.querySelector("#replyModal .close");
    closeButton.addEventListener("click", () => {
        replyModal.hide();
    });

    const sendernameInput = document.getElementById('sendername');
    sendernameInput.value = `App Music Soundbox`;

    const tonameInput = document.getElementById('to');
    tonameInput.value = `${feedback.email}`;

    const replytoInput = document.getElementById('replyto');
    replytoInput.value = `lupanpvd273@gmail.com`;

    const subjectInput = document.getElementById('subject');
    subjectInput.value = `Phản Hồi Feedback App Music Soundbox`;

    const greetingInput = document.getElementById('greeting');
    greetingInput.value = `Xin chào: ${feedback.name}, chúng tôi là nhà phát triển ứng dụng nghe nhạc Music Soundbox. Cảm ơn bạn đã đóng góp ý kiến về ứng dụng của chúng tôi.`;

    const thanksInput = document.getElementById('thankyou');
    thanksInput.value = 'Một lần nữa chúng tôi cảm ơn bạn đã góp ý kiến về ứng dụng của chúng tôi.';

    replyForm.addEventListener('submit', (event) => {
        event.preventDefault();

        const greeting = greetingInput.value;
        const replyContent = document.getElementById('message').value;
        const thankYou = thanksInput.value;
        const sendername = sendernameInput.value;
        const toname = tonameInput.value;
        const subject = subjectInput.value;
        const replytoemail = replytoInput.value;

        feedbackRef.child(feedback.key).update({
            reply: true,
            greeting: greeting,
            replyContent: replyContent,
            thankYou: thankYou,
            sendername: sendername,
            toname: toname,
            subject: subject
        }).then(() => {
            alert("Trả lời thành công!");
            sendEmail();
            getAllFeedback().then(displayFeedback);
            replyModal.hide();
        }).catch((error) => {
            console.error("Lỗi khi trả lời: " + error.message);
        });
    });
}

function sendEmail() {
    (function () {
        emailjs.init("F6FpioINBzzIF7lJC");
    })();

    const params = {
        sendername: document.querySelector("#sendername").value,
        to: document.querySelector("#to").value,
        subject: document.querySelector("#subject").value,
        replyto: document.querySelector("#replyto").value,
        message: document.querySelector("#message").value,
        greeting: document.querySelector("#greeting").value,
        thankyou: document.querySelector("#thankyou").value,
    };

    const serviceID = "service_jeg21qt";
    const templateID = "template_xrg5997";

    emailjs.send(serviceID, templateID, params)
        .then((res) => {
            alert("Email sent successfully!!");
        })
        .catch((error) => {
            console.error("Error sending email:", error);
        });
}

 // Kiểm tra trạng thái đăng nhập trước khi hiển thị dữ liệu
function checkLoginStatus() {
    // Lấy reference đến đối tượng admin trong Realtime Database
      // Lấy reference đến đối tượng admin trong Realtime Database
    const adminRef = firebase.database().ref('users').child("0Syobn6farX70IvRip7uOM1ttt03");
    adminRef.once('value')
        .then(snapshot => {
            const adminData = snapshot.val();

            if (adminData && adminData.loggedIn) {
                // Trạng thái loggedIn là true, hiển thị dữ liệu
                  getAllFeedback()
                .then((feedbackData) => {
                    displayFeedback(feedbackData);
                 
                });
            } else {
                    alert('Vui lòng đăng nhập để xem dữ liệu.');
                    window.location.href = '/'; // Chuyển hướng đến trang đăng nhập
            }
        })
        .catch(error => {
            console.error('Lỗi khi kiểm tra trạng thái loggedIn:', error.message);
            alert('Có lỗi xảy ra khi kiểm tra trạng thái loggedIn.');
        });
} 

// Sự kiện khi trang web được tải
window.onload = function () {
    // Kiểm tra trạng thái đăng nhập khi trang web được tải
    checkLoginStatus();
};



</script>
</body>
</html>
