<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Quản lý âm nhạc</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css">
    <style>
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}
.Textcenter {
    text-align: center;
    font-weight: bold;
}

.title-cell {
width: 200px;
font-weight: bold;
color: #333;
}
    
.image-cell {
  width: 160px;
  text-align: center;
   justify-content: space-around;
  align-items: center;
}

.genre-cell {
     width: 200px;
  font-style: italic;
}

.action-cell {
  display: flex;
  justify-content: space-around;
  align-items: center;
}

/* Style cho table */
#songsTable {
  width: 100%;
  border-collapse: collapse;
}

#songsTable th,
#songsTable td {
  border: 1px solid #ddd;
  padding: 8px;
   text-align: center;
 font-style: italic;
}

#songsTable th {
  background-color: #f2f2f2;
  color: #333;
}
.nav-menu{
    margin-top: 15px;
    display: inline-flex;
   background-color: #f8f9fa;
}

/* Style for pagination */
.pagination {
    display: flex;
    list-style: none;
    padding: 0;
    justify-content: center;
    margin-top: 20px;
}

.pagination li {
    margin-right: 5px;
    cursor: pointer;
    color: #fff;
    border: 1px solid #007bff;
    padding: 5px 10px;
    border-radius: 3px;
}
.pagination a {
    text-decoration: none;
}

.pagination li:hover {
    background-color: #0056b3;
    color: #fff;
}

.btn-primary{
    background-color: orange;
    border: 0px;
    margin-left: 5px;
}
 .btn-primary:hover{
    border: 0px;
    margin-left: 5px;
    background-color: tomato;
 }
 .btn-primary1{
    position: absolute;
     top: 100px;
    left: 300px;
    width: 130px;
    height: 35px;
    background-color: green;
    color: white;
 }
 .btn-primary1:hover{
    position: absolute;
     top: 100px;
    left: 300px;
    width: 130px;
    height: 35px;
    background-color: tomato;
    color: white;
 }
.box-filter{
    position: absolute;
    top: 100px;
    right: 20px;
}
    .nav-item:hover{
        border-radius: 20px;
        background-color: yellow;
    }
/* Định dạng phần label và input */
label {
    display: inline-block;
    margin-bottom: 8px;
    font-weight: bold;
}

input[type="date"] {
    padding: 8px;
    border: 1px solid #ccc;
    border-radius: 4px;
}

/* Định dạng button */
button {
    padding: 10px 15px;
    background-color: #4caf50; /* Màu xanh lá cây */
    color: #fff; /* Màu chữ trắng */
    border: none;
    border-radius: 4px;
    cursor: pointer;
}

button:hover {
    background-color: #45a049; /* Màu xanh lá cây nhạt khi di chuột qua */
}

/* Định dạng layout của phần tử */
#filterContainer {
    margin-left: 250px; /* Khoảng cách từ bên trái của container đến lề trang */
}
.box-filter {
    display: flex;
    align-items: center;
    margin-bottom: 20px;
}

label {
    margin-right: 10px;
}

select {
    padding: 8px;
    border: 1px solid #ccc;
    border-radius: 4px;
}

/* Tuỳ chỉnh màu sắc của option khi được hover hoặc chọn */
select:hover,
select:focus {
    border-color: #4caf50; /* Màu xanh lá cây khi di chuột vào */
}

/* Định dạng màu nền và màu chữ của option khi được hover */
select option:hover {
    background-color: #4caf50;
    color: #fff;
}

/* Định dạng màu nền và màu chữ của option khi được chọn */
select option:checked {
    background-color: #4caf50;
    color: #fff;
}

/* Định dạng button */
button {
    padding: 10px 15px;
    background-color: #4caf50;
    color: #fff;
    border: none;
    border-radius: 4px;
    cursor: pointer;
}

button:hover {
    background-color: #45a049;
}
/* Kiểu cho bảng chứa danh sách bài hát */
#songsTable {
    width: 100%;
    border-collapse: collapse;
    margin-top: 20px;
}

/* Kiểu cho dòng trong bảng */
#songsTable tr {
    background-color: #f8f8f8;
}

/* Kiểu cho ô STT */
#songsTable td:first-child {
    text-align: center;
    font-weight: bold;
}

/* Kiểu cho ô chứa hình ảnh */
#songsTable td img {
    max-width: 80px;
    max-height: 80px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
}

/* Kiểu cho ô chứa các thông tin bài hát */
#songsTable td:nth-child(n+2):not(:last-child) {
    padding: 15px;
}

/* Kiểu cho nút trong ô hành động */
#songsTable .btn {
    padding: 8px 15px;
    font-size: 12px;
    cursor: pointer;
}

#songsTable .btn-danger {
    background-color: #e74c3c;
    color: #fff;
    border: none;
    border-radius: 4px;
}

#songsTable .btn-primary {
    background-color: #3498db;
    color: #fff;
    border: none;
    border-radius: 4px;
}

#songsTable .btn:hover {
    filter: brightness(90%);
}
    </style>
   
    <link rel="stylesheet" href="https://pro.fontawesome.com/releases/v5.10.0/css/all.css">
   
</head>

<body>
    <nav  style="background-color:aquamarine ; height: 83px;" class="navbar navbar-expand-lg bg-body-tertiary">
  <div class="container-fluid">
    <a style="font-weight: bold; " class="navbar-brand" href="./managemusic">Quản Lý Banner</a>
    <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
      <span class="navbar-toggler-icon"></span>
    </button>
    <div class="collapse navbar-collapse" id="navbarSupportedContent">
      <ul class="navbar-nav me-auto mb-2 mb-lg-0">
          <li class="nav-item">
          <a class="nav-link active" aria-current="page" href="./musiccopyright">Quản Lý Nhạc Bản quyền</a>
        </li>
          <li class="nav-item">
          <a class="nav-link active" aria-current="page" href="./music">Quản Lý Bài Hát</a>
        </li>
      </ul>
    
            <form class="d-flex" role="search">
             <input class="form-control me-2" type="search" id="searchInput" placeholder="Tìm kiếm bài hát" aria-label="Search">
              <button id="searchButton" class="btn btn-outline-success" type="button">Search</button>
            </form>
     
    </div>
  </div>
</nav>

    <div class="nav-menu">
     <div>
    <button  type="button" class="btn btn-primary1" data-bs-toggle="modal"
    data-bs-target="#exampleModal">
    Thêm Bài Hát
</button>
</div>
 <div class="box-filter">
        <label for="filterLatest">Lọc:</label>
        <select id="filterLatest" onchange="applyFilter()">
            <option value="">-- Lọc Theo --</option>
            <option value="Filter-a-z">Ký Tự A-Z</option>
            <option value="Filter-z-a">Ký Tự Z-A</option>
            <option value="count-up">Lượt Nghe ↑</option>
            <option value="count-down">Lượt Nghe ↓</option>
        </select>
    </div>
<label style="margin-left: 250px; margin-top: 10px;" for="startDate">Ngày bắt đầu:</label>
<input type="date" id="startDate">

<label style="margin-top: 10px; margin-left: 10px;" for="endDate">Ngày kết thúc:</label>
<input   type="date" id="endDate">

<button style="margin-left: 10px;" onclick="filterByDate()">Lọc</button>
    </div>

    <!-- Modal -->
    <div class="modal fade" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h1 class="modal-title fs-5" id="exampleModalLabel">Thêm Bài Hát Bản Quyền</h1>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form>
                        <div class="form-group">
                            <label for="exampletitle">Tên Bài Hát</label>
                            <input type="text" class="form-control" id="exampletitle" placeholder="Tên bài hát">
                        </div>
                        <div class="form-group">
                            <label for "exampleartist">Ca Sĩ</label>
                            <input type="text" class="form-control" id="exampleartist" placeholder="Tên ca sĩ">
                        </div>
                        <div class="form-group">
                            <label for="exampleauthor">Tác Giả</label>
                            <input type="text" class="form-control" id="exampleauthor" placeholder="Tên tác giả">
                        </div>
                        <div class="mb-3">
                            <label for="exampgenre">Thể Loại</label>
                            <select class="form-select" id="exampgenre" required aria-label="select example">
                                <option value="">Thể Loại</option>
                                <option value="Pop">Pop</option>
                                <option value="Hip-hop/Rap">Hip-hop/Rap</option>
                                <option value="Jazz">Jazz</option>
                                <option value="Classical">Classical</option>
                                <option value="Reggae">Reggae</option>
                                <option value="Blues">Blues</option>
                                <option value="Nhạc Trẻ">Nhạc Trẻ</option>
                                <option value="Trữ Tình">Trữ Tình</option>
                                <option value="Nhạc Khác">Nhạc Khác</option>
                            </select>
                        </div>
                        <div class="form-group">
                            <label for="exampleurl">Link Bài Hát</label>
                            <input type="text" class="form-control" id="exampleurl" placeholder="URL bài hát">
                        </div>
                         <div class="form-group">
                        <label for="exampleimg">Hình Ảnh</label>
                        <input type="file" class="form-control" id="exampleimg" accept="image/*">
                        <img id="previewImage" style="display: none; max-width: 100%; max-height: 200px; margin-top: 10px;">
                    </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Thoát</button>
                    <button type="button" class="btn btn-primary" id="save">Lưu</button>
                </div>
            </div>
        </div>
    </div>
    <!-- Modal sửa bài hát -->
    <div class="modal fade" id="editModal" tabindex="-1" aria-labelledby="editModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="editModalLabel">Sửa Bài Hát</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form>
                        <input type="hidden" id="editSongKey">
                        <div class="form-group">
                            <label for="editTitle">Tên Bài Hát</label>
                            <input type="text" class="form-control" id="editTitle">
                        </div>
                        <div class="form-group">
                            <label for="editArtist">Ca Sĩ</label>
                            <input type="text" class="form-control" id="editArtist">
                        </div>
                        <div class="form-group">
                            <label for="editAuthor">Nhạc Sĩ</label>
                            <input type="text" class="form-control" id="editAuthor">
                        </div>
                        <div class="mb-3">
                            <label for="editGenre">Thể Loại</label>
                            <select class="form-select" id="editGenre" required aria-label="select example">
                                <option value="">Thể Loại</option>
                                <option value="Pop">Pop</option>
                                <option value="Hip-hop/Rap">Hip-hop/Rap</option>
                                <option value="Jazz">Jazz</option>
                                <option value="Classical">Classical</option>
                                <option value="Reggae">Reggae</option>
                                <option value="Blues">Blues</option>
                                <option value="Nhạc Trẻ">Nhạc Trẻ</option>
                                <option value="Trữ Tình">Trữ Tình</option>
                                <option value="Nhạc Khác">Nhạc Khác</option>
                            </select>
                        </div>
                        <div class="form-group">
                            <label for="editUrl">Link Bài Hát</label>
                            <input type="text" class="form-control" id="editUrl">
                        </div>
                    <label for="editImage">Hình ảnh:</label>
                    <input type="file" id="editImage" name="editImage" accept="image/*">
                     <img id="editImagePreview" alt="Song Image" style="max-width: 200px; max-height: 200px; padding: 10px;">
                      
                         <div class="form-group">
                            <label for="password">Nhập Mật Khẩu</label>
                               <input type="password" id="password" class="form-control" placeholder="Nhập mật khẩu">
                        </div>
                    </form>

                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Hủy</button>
                    <button type="button" class="btn btn-primary" id="saveEdit">Lưu Sửa</button>
                </div>
            </div>
        </div>
    </div>
<!-- Modal xác nhận xóa -->
<div class="modal fade" id="confirmDeleteModal" tabindex="-1" aria-labelledby="confirmDeleteModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="confirmDeleteModalLabel">Xác nhận xóa bài hát</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Nhập mật khẩu để xác nhận xóa:</p>
                <input type="password" id="passwordInput" class="form-control" placeholder="Nhập mật khẩu">
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Đóng</button>
                <button type="button" class="btn btn-danger" id="confirmDeleteButton">Xác nhận xóa</button>
            </div>
        </div>
    </div>
</div>

      <!-- Bảng hiển thị danh sách bài hát -->
        <table class="table table-bordered mt-4">
            <thead style="background-color: violet; text-align: center; color: white;">
                <tr>
                     <th>STT</th>
                    <th>Tiêu đề</th>
                    <th>Ca sĩ</th>
                    <th>Hình ảnh</th>
                    <th>Tác giả</th>
                    <th>Thể loại</th>
                    <th>Thời Gian</th>
                    <th>Chức năng</th>
                </tr>
            </thead>
            <tbody id="songsTable"></tbody>
        </table>
    
    <ul class="pagination" id="pagination"></ul>
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.6/dist/umd/popper.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.min.js"></script>
    <!-- Firebase JavaScript SDK -->
    <script src="https://www.gstatic.com/firebasejs/8.8.0/firebase-app.js"></script>
    <script src="https://www.gstatic.com/firebasejs/8.8.0/firebase-database.js"></script>
 <script>
    const firebaseConfig = {
        apiKey: "AIzaSyCZgZP878mOAM2ec-hz1WFwORxSw_J6d2k",
        authDomain: "soundbox-du-an-md31.firebaseapp.com",
        databaseURL: "https://soundbox-du-an-md31-default-rtdb.firebaseio.com",
        projectId: "soundbox-du-an-md31",
        storageBucket: "soundbox-du-an-md31.appspot.com",
        messagingSenderId: "265264289877",
        appId: "1:265264289877:web:0f88e2fa54c638685e9cdc",
        measurementId: "G-FE9Z9NKJDR"
    };
    firebase.initializeApp(firebaseConfig);

    const database = firebase.database();
    const songsRef = database.ref("songs");
  
    const pagination = document.getElementById('pagination');

function getSongsFromFirebase() {
  // This function fetches the songs data from Firebase and returns a Promise
  return new Promise((resolve, reject) => {
    songsRef.once('value', (snapshot) => {
      const songsData = snapshot.val();
      const songsArray = Object.values(songsData); // Convert object to array

      resolve(songsArray);
    }, (error) => {
      reject(error);
    });
  });
}

const saveButton = document.getElementById("save");
const imageInput = document.getElementById("exampleimg");
const previewImage = document.getElementById("previewImage");

// Thêm sự kiện nghe khi trường input file thay đổi
imageInput.addEventListener("change", function () {
    displaySelectedImage();
});

saveButton.addEventListener("click", function () {
    const title = document.getElementById("exampletitle").value;
    const artist = document.getElementById("exampleartist").value;
    const author = document.getElementById("exampleauthor").value;
    const genre = document.getElementById("exampgenre").value;
    const url = document.getElementById("exampleurl").value;

    // Lấy thời gian hiện tại
    const currentTime = new Date().toISOString();

    // Lấy thông tin về file hình ảnh đã chọn
    const imageFile = imageInput.files[0];

    // Kiểm tra xem người dùng đã chọn hình ảnh chưa
    if (!imageFile) {
        console.error("Vui lòng chọn một hình ảnh.");
        return;
    }

    // Tạo số ngẫu nhiên có giá trị từ 1000000000 đến 4294967295 (giới hạn của số nguyên 32-bit)
    const randomKey = Math.floor(Math.random() * (999999 - 100000 + 1) + 100000);

    // Tạo đối tượng FileReader để đọc dữ liệu của file hình ảnh
    const reader = new FileReader();

    // Xử lý sự kiện khi đọc file thành công
    reader.onload = function (e) {
        // Lấy đường dẫn của hình ảnh sau khi được đọc
        const img = e.target.result;

        // Tạo đối tượng bài hát mới với các thông tin đã lấy được từ các trường dữ liệu
        const newSong = {
            id: randomKey,
            title: title,
            artist: artist,
            author: author,
            genre: genre,
            url: url,
            image: img,
            copyrighted: false, // Đặt giá trị của trường copyrighted là false
            featured: true,    // Thêm trường featured với giá trị true
            count: 0,
            latest: true,
            timestamp: currentTime,
        };

        // Đẩy thông tin bài hát lên Firebase Realtime Database và sử dụng trường "id" làm key chính
        songsRef.child(newSong.id)
            .set(newSong)
            .then(function () {
                console.log("Bài hát đã được lưu vào Firebase Realtime Database.");
                // Đặt lại giá trị của các ô input về trống
                document.getElementById("exampletitle").value = "";
                document.getElementById("exampleartist").value = "";
                document.getElementById("exampleauthor").value = "";
                document.getElementById("exampgenre").value = "";
                document.getElementById("exampleurl").value = "";
                document.getElementById("exampleimg").value = "";
                displaySelectedImage(); // Hiển thị hình ảnh đã chọn sau khi lưu
                $("#exampleModal").modal("hide");
                // Hiển thị lại dữ liệu sau khi thêm thành công
                displayData();
            })
            .catch(function (error) {
                console.error("Lỗi khi lưu bài hát vào Firebase Realtime Database: " + error.message);
            });
    };

    // Đọc nội dung của file hình ảnh
    reader.readAsDataURL(imageFile);
});


// Hàm hiển thị hình ảnh đã chọn
function displaySelectedImage() {
    const imageFile = imageInput.files[0];

    if (imageFile) {
        // Hiển thị hình ảnh trong thẻ img
        previewImage.src = URL.createObjectURL(imageFile);
        previewImage.style.display = "block"; // Hiển thị thẻ img
    } else {
        // Nếu không có hình ảnh, ẩn thẻ img
        previewImage.style.display = "none";
    }
}

function displayData() {
        getAllSongs().then((songs) => {
            if (songs.length > 0) {
                updateSongsTable(songs);
            } else {
                console.log("Không có bài hát nào.");
            }
        });
    }

   const startDateInput = document.getElementById("startDate");
    const endDateInput = document.getElementById("endDate");

    // Hàm lọc theo ngày
    function filterByDate() {
        // Lấy giá trị ngày bắt đầu và ngày kết thúc từ các trường input
        const startDate = startDateInput.value;
        const endDate = endDateInput.value;

        // Kiểm tra xem ngày bắt đầu và kết thúc có giá trị không
        if (!startDate || !endDate) {
            alert("Vui lòng nhập cả ngày bắt đầu và ngày kết thúc.");
            return;
        }

        // Chuyển đổi chuỗi ngày thành đối tượng Date
        const startTimestamp = new Date(startDate).toISOString();
        const endTimestamp = new Date(endDate).toISOString();

        // Lọc dữ liệu theo khoảng thời gian từ Firebase
        songsRef.orderByChild("timestamp")
            .startAt(startTimestamp)
            .endAt(endTimestamp)
            .once("value")
            .then((snapshot) => {
                const filteredSongs = [];
                snapshot.forEach((childSnapshot) => {
                    const songData = childSnapshot.val();
                    songData.key = childSnapshot.key;
                    filteredSongs.push(songData);
                });

                // Hiển thị bài hát đã lọc
                updateSongsTable(filteredSongs);
            })
            .catch((error) => {
                console.error("Lỗi khi lọc dữ liệu từ Firebase: " + error.message);
            });
    }

 function applyFilter() {
    const filterSelect = document.getElementById('filterLatest');
    const selectedValue = filterSelect.value;

    getAllSongs().then((songs) => {
        let filteredSongs = [];

        switch (selectedValue) {
            case 'Filter-a-z':
                filteredSongs = songs.sort((a, b) => a.title.localeCompare(b.title));
                console.log(filteredSongs);
                break;
            case 'Filter-z-a':
                filteredSongs = songs.sort((a, b) => b.title.localeCompare(a.title));
                console.log(filteredSongs);
                break;
            case 'count-up':
                filteredSongs = songs.sort((a, b) => a.count - b.count);
                console.log(filteredSongs);
                break;
            case 'count-down':
                filteredSongs = songs.sort((a, b) => b.count - a.count);
                console.log(filteredSongs);
                break;
            default:
                // No filter selected, use the original order
                filteredSongs = songs;
                break;
        }

        updateSongs(filteredSongs);
           console.log( updateSongs(filteredSongs));
    });
}


document.getElementById("searchButton").addEventListener("click", function () {
    // Get the search input value
    const searchInput = document.getElementById("searchInput").value.toLowerCase();

    // Get all songs and filter them based on the search term
    getAllSongs().then((songs) => {
        const filteredSongs = songs.filter((song) => {
            // You can customize this condition based on how you want to filter the songs
            return (
                song.title.toLowerCase().includes(searchInput) ||
                song.artist.toLowerCase().includes(searchInput) ||
                song.genre.toLowerCase().includes(searchInput)
            );
        });

        // Update the songs table with the filtered songs
        updateSongs(filteredSongs);
    });
});

// Hàm cập nhật bảng bài hát với dữ liệu đã lấy được và điều kiện latest:true
function updateSongs(songs) {
    const tableBody = document.getElementById("songsTable");

    // Clear nội dung hiện tại của bảng
    tableBody.innerHTML = "";

    // Tính toán chỉ số bắt đầu và chỉ số kết thúc của bài hát cần hiển thị
    const startIndex = (currentPage - 1) * itemsPerPage;
    const endIndex = startIndex + itemsPerPage;

    // Lấy danh sách bài hát của trang hiện tại, chỉ bao gồm các bài hát có latest:true
    const songsOnCurrentPage = songs
        .filter(song => song.featured === true)
        .slice(startIndex, endIndex);
    // Nếu không có bài hát nào thỏa mãn điều kiện lọc, thông báo và kết thúc hàm
    if (songsOnCurrentPage.length === 0) {
        console.log("Không có bài hát nào thỏa mãn điều kiện lọc.");
        return;
    }

    // Lặp qua danh sách bài hát và thêm chúng vào bảng
    songsOnCurrentPage.forEach((song, index) => {
        const row = tableBody.insertRow();

        // Thêm ô STT vào hàng
        const sttCell = row.insertCell(0);
        sttCell.textContent = index + 1; // Số thứ tự bắt đầu từ 1
        sttCell.style.textAlign = "center"; // Căn giữa ô STT

        // Thêm các ô khác vào hàng
        const titleCell = row.insertCell(1);
        const artistCell = row.insertCell(2);
        const imageCell = row.insertCell(3);
        const authorCell = row.insertCell(4);
        const genreCell = row.insertCell(5);
        const timeCell = row.insertCell(6);
        const actionCell = row.insertCell(7);

        // Điền thông tin của bài hát vào các ô
        titleCell.textContent = song.title;
        artistCell.textContent = song.artist;
        imageCell.innerHTML = `<img src="${song.image}" alt="Song Image" style="max-width: 100px; max-height: 100px;">`;
        authorCell.textContent = song.author;
        genreCell.textContent = song.genre;
        timeCell.textContent = new Date(song.timestamp).toLocaleString();
        
 // Thêm class cho các ô
        sttCell.classList.add('stt-cell');
        titleCell.classList.add('song-info-cell');
        artistCell.classList.add('song-info-cell');
        imageCell.classList.add('song-image-cell');
        authorCell.classList.add('song-info-cell');
        genreCell.classList.add('song-info-cell');
        timeCell.classList.add('song-info-cell');
        actionCell.classList.add('action-cell');

        // Thêm nút xóa
        const deleteButton = document.createElement("button");
        deleteButton.textContent = "Xóa";
        deleteButton.classList.add("btn", "btn-danger");
        deleteButton.addEventListener("click", () => {
            // Gọi hàm xác nhận xóa với key của bài hát
            confirmDelete(song.key);
        });
        actionCell.appendChild(deleteButton);

        // Thêm nút sửa
        const editButton = document.createElement("button");
        editButton.textContent = "Chỉnh sửa";
        editButton.classList.add("btn", "btn-primary");
        editButton.addEventListener("click", () => {
            $("#editModal").modal("show");
            document.getElementById("editSongKey").value = song.key;
            document.getElementById("editTitle").value = song.title || "";
            document.getElementById("editArtist").value = song.artist || "";
            document.getElementById("editAuthor").value = song.author || "";
            document.getElementById("editGenre").value = song.genre || "";
            document.getElementById("editUrl").value = song.url || "";

            // Thêm đường dẫn hình ảnh vào thẻ <img>
            const editImagePreview = document.getElementById("editImagePreview");

            // Kiểm tra xem có hình ảnh trong song hay không
            if (song.image) {
                editImagePreview.src = song.image; // Nếu có, hiển thị hình ảnh
            } else {
                editImagePreview.src = ""; // Nếu không, đặt src thành rỗng
            }

            // Lắng nghe sự kiện khi người dùng chọn ảnh mới
            const editImageInput = document.getElementById("editImage");
            editImageInput.addEventListener("change", function () {
                if (!this.files || !this.files[0]) {
                    alert("Vui lòng chọn một hình ảnh.");
                    return;
                }
                const imageFile = this.files[0];
                const reader = new FileReader();

                // Xử lý sự kiện khi đọc file thành công
                reader.onload = function (e) {
                    // Hiển thị hình ảnh mới
                    editImagePreview.src = e.target.result;
                };

                // Đọc nội dung của file hình ảnh
                reader.readAsDataURL(imageFile);
            });
        });
        actionCell.appendChild(editButton);
    });

    // Hiển thị nút phân trang
    updatePaginationButtons(songsOnCurrentPage.length);
}

function updateSongsTable(songs) {
    const tableBody = document.getElementById("songsTable");

    tableBody.innerHTML = "";

    const startIndex = (currentPage - 1) * itemsPerPage;
    const endIndex = startIndex + itemsPerPage;

    // Lọc và sắp xếp danh sách bài hát theo điều kiện featured:true và thời gian giảm dần
    const featuredSongs = songs.filter(song => song.featured === true);
    const sortedFeaturedSongs = featuredSongs.sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));
    const featuredSongsOnCurrentPage = sortedFeaturedSongs.slice(startIndex, endIndex);

    if (featuredSongsOnCurrentPage.length === 0) {
        console.log("Không có bài hát nào thỏa mãn điều kiện lọc.");
        return;
    }

    featuredSongsOnCurrentPage.forEach((song, index) => {
        const row = tableBody.insertRow();

        const sttCell = row.insertCell(0);
        sttCell.textContent = index + 1;
        sttCell.style.textAlign = "center";

        const titleCell = row.insertCell(1);
        const artistCell = row.insertCell(2);
        const imageCell = row.insertCell(3);
        const authorCell = row.insertCell(4);
        const genreCell = row.insertCell(5);
        const timeCell = row.insertCell(6);
        const actionCell = row.insertCell(7);

        titleCell.textContent = song.title;
        artistCell.textContent = song.artist;
        imageCell.innerHTML = `<img src="${song.image}" alt="Song Image" style="max-width: 100px; max-height: 100px;">`;
        authorCell.textContent = song.author;
        genreCell.textContent = song.genre;
        timeCell.textContent = new Date(song.timestamp).toLocaleString();

        // Thêm class cho các ô
        sttCell.classList.add('stt-cell');
        titleCell.classList.add('song-info-cell');
        artistCell.classList.add('song-info-cell');
        imageCell.classList.add('song-image-cell');
        authorCell.classList.add('song-info-cell');
        genreCell.classList.add('song-info-cell');
        timeCell.classList.add('song-info-cell');
        actionCell.classList.add('action-cell');

        const deleteButton = document.createElement("button");
        deleteButton.textContent = "Xóa";
        deleteButton.classList.add("btn", "btn-danger");
        deleteButton.addEventListener("click", () => {
            confirmDelete(song.key);
        });
        actionCell.appendChild(deleteButton);

        const editButton = document.createElement("button");
        editButton.textContent = "Chỉnh sửa";
        editButton.classList.add("btn", "btn-primary");
        editButton.addEventListener("click", () => {
            $("#editModal").modal("show");

            document.getElementById("editSongKey").value = song.key;
            document.getElementById("editTitle").value = song.title || "";
            document.getElementById("editArtist").value = song.artist || "";
            document.getElementById("editAuthor").value = song.author || "";
            document.getElementById("editGenre").value = song.genre || "";
            document.getElementById("editUrl").value = song.url || "";

            const editImagePreview = document.getElementById("editImagePreview");

            if (song.image) {
                editImagePreview.src = song.image;
            } else {
                editImagePreview.src = "";
            }

            const editImageInput = document.getElementById("editImage");
            editImageInput.addEventListener("change", function () {
                if (!this.files || !this.files[0]) {
                    alert("Vui lòng chọn một hình ảnh.");
                    return;
                }
                const imageFile = this.files[0];
                const reader = new FileReader();

                reader.onload = function (e) {
                    editImagePreview.src = e.target.result;
                };

                reader.readAsDataURL(imageFile);
            });
        });
        actionCell.appendChild(editButton);
    });

    // Hiển thị nút phân trang
    updatePaginationButtons(sortedFeaturedSongs.length);
}


const itemsPerPage = 5; // Số lượng bài hát hiển thị trên mỗi trang
let currentPage = 1; // Trang hiện tại

function updatePaginationButtons(totalItems) {
    const totalPages = Math.ceil(totalItems / itemsPerPage);

    // Lấy phần tử cha của nút phân trang
    const paginationContainer = document.getElementById("pagination");

    // Xóa nút phân trang hiện tại
    paginationContainer.innerHTML = "";

    // Tạo nút "Trang trước"
    const prevButton = document.createElement("button");
    prevButton.textContent = "Trang trước";
    prevButton.classList.add("btn", "btn-secondary");
    prevButton.addEventListener("click", () => {
        if (currentPage > 1) {
            currentPage--;
            displayData(); // Cập nhật dữ liệu khi chuyển trang
        }
    });
    paginationContainer.appendChild(prevButton);

    // Tạo các nút trang
    for (let i = 1; i <= totalPages; i++) {
        const pageButton = document.createElement("button");
        pageButton.textContent = i.toString();
        pageButton.classList.add("btn", "btn-secondary", "mx-1");
        pageButton.addEventListener("click", () => {
            currentPage = i;
            displayData(); // Cập nhật dữ liệu khi chuyển trang
        });
        paginationContainer.appendChild(pageButton);
    }

    // Tạo nút "Trang sau"
    const nextButton = document.createElement("button");
    nextButton.textContent = "Trang sau";
    nextButton.classList.add("btn", "btn-secondary");
    nextButton.addEventListener("click", () => {
        if (currentPage < totalPages) {
            currentPage++;
            displayData(); // Cập nhật dữ liệu khi chuyển trang
        }
    });
    paginationContainer.appendChild(nextButton);
}

const saveEditButton = document.getElementById("saveEdit");
const editImageInput = document.getElementById("editImage");
const editImagePreview = document.getElementById("editImagePreview");

// Gọi hàm khi nút Save được nhấn trong modal sửa
saveEditButton.addEventListener("click", function () {
    // Thêm mã kiểm tra mật khẩu vào đây
    const password = document.getElementById("password").value;
    checkPassword(password)
        .then((passwordCorrect) => {
            if (passwordCorrect) {
                // Nếu mật khẩu đúng, tiếp tục xử lý
                const songKey = document.getElementById("editSongKey").value;
                const editedTitle = document.getElementById("editTitle").value;
                const editedArtist = document.getElementById("editArtist").value;
                const editedAuthor = document.getElementById("editAuthor").value;
                const editedGenre = document.getElementById("editGenre").value;
                const editedUrl = document.getElementById("editUrl").value;
                const editedSongRef = songsRef.child(songKey);
                // Lấy thông tin hình ảnh từ trường nhập file
                const imageFile = editImageInput.files[0];

                // Lấy thời gian hiện tại
                const currentTime = new Date().toISOString();

                // Nếu người dùng đã chọn một hình ảnh mới
                if (imageFile) {
                    // Tạo đối tượng FileReader để đọc nội dung của file hình ảnh
                    const reader = new FileReader();

                    // Xử lý sự kiện khi đọc file thành công
                    reader.onload = function (e) {
                        // Cập nhật đường dẫn hình ảnh trong modal sửa
                        editImagePreview.src = e.target.result;

                        // Cập nhật thông tin bài hát trong Firebase
                        editedSongRef.update({
                            title: editedTitle,
                            artist: editedArtist,
                            author: editedAuthor,
                            genre: editedGenre,
                            url: editedUrl,
                            image: e.target.result, // Lưu đường dẫn hình ảnh
                            timestamp: currentTime, // Cập nhật thời gian sửa thành thời điểm hiện tại
                        });

                        console.log("Song edited successfully.");
                        $("#editModal").modal("hide");

                        // Hiển thị lại dữ liệu sau khi chỉnh sửa
                        displayData();
                      // Đặt lại giá trị của ô password về rỗng
                        document.getElementById("password").value = "";
                    };

                    // Đọc nội dung của file hình ảnh
                    reader.readAsDataURL(imageFile);
                } else {
                    // Nếu không có hình ảnh mới được chọn, chỉ cập nhật thông tin bài hát không cần đường dẫn hình ảnh
                    editedSongRef.update({
                        title: editedTitle,
                        artist: editedArtist,
                        author: editedAuthor,
                        genre: editedGenre,
                        url: editedUrl,
                        timestamp: currentTime, // Cập nhật thời gian sửa thành thời điểm hiện tại
                    });

                    console.log("Song edited successfully.");
                    $("#editModal").modal("hide");

                    // Hiển thị lại dữ liệu sau khi chỉnh sửa
                    displayData();
                    // Đặt lại giá trị của ô password về rỗng
                    document.getElementById("password").value = "";     
                }
            } else {
                // Nếu mật khẩu không đúng, hiển thị thông báo lỗi
                alert("Mật khẩu không đúng. Vui lòng thử lại.");
            }
        })
        .catch((error) => {
            console.error("Lỗi khi kiểm tra mật khẩu: " + error.message);
        });
});



// Function to confirm deletion and call deleteSong function
function confirmDelete(songKey) {
    const confirmDeleteModal = new bootstrap.Modal(document.getElementById('confirmDeleteModal'));
    const confirmDeleteButton = document.getElementById('confirmDeleteButton');
    const passwordInput = document.getElementById('passwordInput');
    // Set up a click event listener for the delete button in the modal
    confirmDeleteButton.onclick = function () {
        // Kiểm tra mật khẩu
        const enteredPassword = passwordInput.value;

        // Kiểm tra mật khẩu trước khi xác nhận xóa bài hát
        checkPassword(enteredPassword)
            .then((passwordCorrect) => {
                if (passwordCorrect) {
                    deleteSong(songKey);
                    confirmDeleteModal.hide();
                } else {
                    // Hiển thị thông báo lỗi nếu mật khẩu không đúng
                    alert("Mật khẩu không đúng. Vui lòng thử lại.");
                }
            })
            .catch((error) => {
                console.error("Lỗi khi kiểm tra mật khẩu: " + error.message);
            });
    };
    // Show the confirmation modal
    confirmDeleteModal.show();
}

// Function to check the entered password
function checkPassword(enteredPassword) {
    return new Promise((resolve, reject) => {
        const userId = "0Syobn6farX70IvRip7uOM1ttt03"; // ID của người dùng
        const usersRef = firebase.database().ref("users");

        // Truy vấn cơ sở dữ liệu để lấy thông tin người dùng
        usersRef.child(userId).once("value", function (snapshot) {
            const userData = snapshot.val();

            if (userData) {
                const storedPassword = userData.password;

                // So sánh mật khẩu nhập vào với mật khẩu lấy từ cơ sở dữ liệu
                if (enteredPassword === storedPassword) {
                    // Mật khẩu đúng
                    console.log("Mật khẩu đúng.");
                    resolve(true);
                } else {
                    // Mật khẩu sai
                    console.log("Mật khẩu sai.");
                    resolve(false);
                }
            } else {
                // Người dùng không tồn tại trong cơ sở dữ liệu
                console.log("Người dùng không tồn tại trong cơ sở dữ liệu.");
                reject(new Error("Người dùng không tồn tại trong cơ sở dữ liệu."));
            }
        });
    });
}

// Function to delete a song from Firebase
function deleteSong(songKey) {
    songsRef.child(songKey).remove()
        .then(function () {
            console.log("Bài hát đã được xóa thành công.");
            displayData(); // Refresh the table after deletion
            document.getElementById("passwordInput").value = "";
        })
        .catch(function (error) {
            console.error("Lỗi khi xóa bài hát: " + error.message);
        });
}

// Function to get all songs from Firebase
function getAllSongs() {
    return songsRef.once("value").then((snapshot) => {
        const allSongs = [];

        snapshot.forEach((childSnapshot) => {
            const songData = childSnapshot.val();
            songData.key = childSnapshot.key;
            allSongs.push(songData);
        });

        return allSongs;
    }).catch((error) => {
        console.error("Error getting data from Firebase: " + error.message);
        return [];
    });
}

// Function to search songs and update the table
function searchSongs() {
    const searchInput = document.getElementById("searchInput").value.toLowerCase();

    getAllSongs().then((allSongs) => {
        let filteredSongs;

        // Check if searchInput is empty, if yes, show all songs
        if (searchInput.trim() === "") {
            filteredSongs = allSongs;
        } else {
            // Filter songs based on the search input
            filteredSongs = allSongs.filter((song) => {
                const title = (song.title || "").toLowerCase();
                const artist = (song.artist || "").toLowerCase();
                const author = (song.author || "").toLowerCase();
                const genre = (song.genre || "").toLowerCase();

                return (
                    title.includes(searchInput) ||
                    artist.includes(searchInput) ||
                    author.includes(searchInput) ||
                    genre.includes(searchInput)
                );
            });
        }

        currentPage = 1; // Reset current page to 1 when performing a new search
        updatePaginationButtons(filteredSongs.length);
        updateSongsTable(filteredSongs); // Update the table with filtered songs
    });
}

// Sự kiện khi nút tìm kiếm được click
const searchButton = document.getElementById("searchButton");
if (searchButton) {
    searchButton.addEventListener("click", function (event) {
        event.preventDefault(); // Ngăn chặn form từ việc submit (tránh reload trang)
        // Gọi hàm searchSongs
        searchSongs();
    });
} else {
    console.error("Search button not found. Make sure you have an element with id 'searchButton'");
}

// Sự kiện khi nút tìm kiếm được click
searchButton.addEventListener("click", function (event) {
    event.preventDefault(); // Ngăn chặn form từ việc submit (tránh reload trang)
    // Gọi hàm searchSongs
    searchSongs();
});
 // Kiểm tra trạng thái đăng nhập trước khi hiển thị dữ liệu
function checkLoginStatus() {
     // Lấy reference đến đối tượng admin trong Realtime Database
    const adminRef = firebase.database().ref('users').child("0Syobn6farX70IvRip7uOM1ttt03");

    adminRef.once('value')
        .then(snapshot => {
            const adminData = snapshot.val();

            if (adminData && adminData.loggedIn) {
                // Trạng thái loggedIn là true, hiển thị dữ liệu
                displayData();
            } else {
                // Trạng thái loggedIn là false hoặc không tìm thấy thông tin admin
                alert('Vui lòng đăng nhập để xem dữ liệu.');
                window.location.href = '/'; // Chuyển hướng đến trang đăng nhập
            }
        })
        .catch(error => {
            console.error('Lỗi khi kiểm tra trạng thái loggedIn:', error.message);
            alert('Có lỗi xảy ra khi kiểm tra trạng thái loggedIn.');
        });
}

// Sự kiện khi trang web được tải
window.onload = function () {
    // Kiểm tra trạng thái đăng nhập khi trang web được tải
    checkLoginStatus();
};

function displayData() {
     getAllSongs().then(updateSongsTable);
}
</script>


</body>

</html>
